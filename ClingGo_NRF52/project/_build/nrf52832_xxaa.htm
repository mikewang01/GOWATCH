<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\_build\nrf52832_xxaa.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\_build\nrf52832_xxaa.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Tue Feb 21 21:07:46 2017
<BR><P>
<H3>Maximum Stack Usage =       1336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
cling_task_core_fsm &rArr; TRACKING_data_logging &rArr; _logging_per_minute &rArr; _minute_data_flush_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">MemoryManagement_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemoryManagement_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[e]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">SysTick_Handler</a><BR>
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">CCM_AAR_IRQHandler</a><BR>
 <LI><a href="#[35f]">queue_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35f]">queue_process</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[67]">ALERT_notific_timer_callback</a> from clingtask_ouptut.o(i.ALERT_notific_timer_callback) referenced from notific.o(i.NOTIFIC_state_machine)
 <LI><a href="#[69]">ALERT_reminder_timer_callback</a> from clingtask_ouptut.o(i.ALERT_reminder_timer_callback) referenced from reminder.o(i.REMINDER_state_machine)
 <LI><a href="#[9]">BusFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1e]">CCM_AAR_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[22]">COMP_LPCOMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1d]">ECB_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[33]">FPU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[15]">GPIOTE_IRQHandler</a> from nrf_drv_gpiote.o(i.GPIOTE_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from hardfault_handler_keil.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[35]">HardFault_c_handler</a> from hardfault_implementation.o(i.HardFault_c_handler) referenced from hardfault_handler_keil.o(.emb_text)
 <LI><a href="#[32]">I2S_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2d]">MWU_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[8]">MemoryManagement_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[14]">NFCT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2c]">PDM_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[f]">POWER_CLOCK_IRQHandler</a> from nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2b]">PWM0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2e]">PWM1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2f]">PWM2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[21]">QDEC_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[10]">RADIO_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1c]">RNG_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1a]">RTC0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[20]">RTC1_IRQHandler</a> from port_cmsis_systick.o(i.RTC1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[31]">RTC2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6a]">RTC_timer_handler</a> from rtc.o(i.RTC_timer_handler) referenced from rtc.o(i.RTC_Init)
 <LI><a href="#[5]">Reset_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[16]">SAADC_IRQHandler</a> from nrf_drv_saadc.o(i.SAADC_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[6b]">SFE_exti_callback</a> from clingtask_input.o(i.SFE_exti_callback) referenced from clingtask_input.o(i.SFE_touch_key_init)
 <LI><a href="#[12]">SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</a> from nrf_drv_common.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[13]">SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</a> from nrf_drv_common.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[30]">SPIM2_SPIS2_SPI2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from port.o(.emb_text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[23]">SWI0_EGU0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[24]">SWI1_EGU1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[25]">SWI2_EGU2_IRQHandler</a> from softdevice_handler.o(i.SWI2_EGU2_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[26]">SWI3_EGU3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[27]">SWI4_EGU4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[28]">SWI5_EGU5_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_nrf52.o(i.SystemInit) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[1b]">TEMP_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[17]">TIMER0_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[29]">TIMER3_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[2a]">TIMER4_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[11]">UARTE0_UART0_IRQHandler</a> from nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[68]">UI_oled_timer_callback</a> from clingtask_ouptut.o(i.UI_oled_timer_callback) referenced from oled.o(i.OLED_state_machine)
 <LI><a href="#[73]">UI_rendering_timer_callback</a> from clingtask_ouptut.o(i.UI_rendering_timer_callback) referenced from ui.o(i.UI_init)
 <LI><a href="#[a]">UsageFault_Handler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[1f]">WDT_IRQHandler</a> from arm_startup_nrf52.o(.text) referenced from arm_startup_nrf52.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from arm_startup_nrf52.o(.text)
 <LI><a href="#[80]">_on_ble_evt</a> from ble_cling.o(i._on_ble_evt) referenced from ble_cling.o(i.cling_service_init)
 <LI><a href="#[75]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[6c]">acc_open</a> from spidev_hal.o(i.acc_open) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[4a]">adv_freq_swicth_process</a> from ble_gap_mgr.o(i.adv_freq_swicth_process) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[3e]">adv_timeout_cb</a> from ble_gap_mgr.o(i.adv_timeout_cb) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[38]">aes_hash_finish_cb</a> from btle.o(i.aes_hash_finish_cb) referenced from btle.o(i.BTLE_aes_decrypt)
 <LI><a href="#[38]">aes_hash_finish_cb</a> from btle.o(i.aes_hash_finish_cb) referenced from btle.o(i.BTLE_aes_encrypt)
 <LI><a href="#[77]">ble_evt_dispatch</a> from ble_peripheral_task.o(i.ble_evt_dispatch) referenced from ble_peripheral_task.o(i.ble_stack_init)
 <LI><a href="#[76]">ble_new_event_handler</a> from ble_peripheral_task.o(i.ble_new_event_handler) referenced from ble_peripheral_task.o(i.ble_stack_init)
 <LI><a href="#[7f]">ble_peripheral_task</a> from ble_peripheral_task.o(i.ble_peripheral_task) referenced from clingtask.o(i.cling_init_task)
 <LI><a href="#[79]">ble_rev_process</a> from btle.o(i.ble_rev_process) referenced from btle.o(i.btle_init)
 <LI><a href="#[90]">bsp_button_event_handler</a> from bsp.o(i.bsp_button_event_handler) referenced from bsp.o(.constdata)
 <LI><a href="#[7a]">btle_on_connect</a> from btle.o(i.btle_on_connect) referenced from btle.o(i.btle_init)
 <LI><a href="#[7b]">btle_on_disconnect</a> from btle.o(i.btle_on_disconnect) referenced from btle.o(i.btle_init)
 <LI><a href="#[86]">cling_init_task</a> from clingtask.o(i.cling_init_task) referenced from main.o(i.main)
 <LI><a href="#[7d]">cling_task_core_fsm</a> from clingtask.o(i.cling_task_core_fsm) referenced from clingtask.o(i.cling_init_task)
 <LI><a href="#[7c]">cling_task_input</a> from clingtask_input.o(i.cling_task_input) referenced from clingtask.o(i.cling_init_task)
 <LI><a href="#[7e]">cling_task_output</a> from clingtask_ouptut.o(i.cling_task_output) referenced from clingtask.o(i.cling_init_task)
 <LI><a href="#[3d]">close</a> from battmgr_hal.o(i.close) referenced from battmgr_hal.o(i.BattMgrHal_init)
 <LI><a href="#[63]">close</a> from i2cdev_hal.o(i.close) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[71]">close</a> from spidev_hal.o(i.close) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[4b]">decrypt</a> from aes_hal.o(i.decrypt) referenced from aes_hal.o(i.HalAes_init)
 <LI><a href="#[51]">disable_all</a> from exti_hal.o(i.disable_all) referenced from exti_hal.o(i.HalExti_init)
 <LI><a href="#[4e]">disable_clock</a> from aes_hal.o(i.disable_clock) referenced from aes_hal.o(i.HalAes_init)
 <LI><a href="#[44]">disconnect</a> from ble_gap_mgr.o(i.disconnect) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[50]">enable_all</a> from exti_hal.o(i.enable_all) referenced from exti_hal.o(i.HalExti_init)
 <LI><a href="#[4d]">enable_clock</a> from aes_hal.o(i.enable_clock) referenced from aes_hal.o(i.HalAes_init)
 <LI><a href="#[4c]">encrypt</a> from aes_hal.o(i.encrypt) referenced from aes_hal.o(i.HalAes_init)
 <LI><a href="#[5c]">erase_all</a> from ota_hal.o(i.erase_all) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[5a]">erase_one_block_32k</a> from ota_hal.o(i.erase_one_block_32k) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[58]">erase_one_block_4k</a> from ota_hal.o(i.erase_one_block_4k) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[59]">erase_one_block_64k</a> from ota_hal.o(i.erase_one_block_64k) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[45]">event_process</a> from ble_gap_mgr.o(i.event_process) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[87]">fds_evt_handler</a> from peer_data_storage.o(i.fds_evt_handler) referenced from peer_data_storage.o(i.pds_init)
 <LI><a href="#[6d]">flash_open</a> from spidev_hal.o(i.flash_open) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[74]">fputc</a> from retarget.mod.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[4]">fs_event_handler</a> from fds.o(i.fs_event_handler) referenced 2 times from fds.o(fs_data)
 <LI><a href="#[2]">gcm_gscm_evt_handler</a> from gatt_cache_manager.o(i.gcm_gscm_evt_handler) referenced 2 times from gatts_cache_manager.o(.data)
 <LI><a href="#[92]">gcm_im_evt_handler</a> from gatt_cache_manager.o(i.gcm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[9a]">gcm_smd_evt_handler</a> from gatt_cache_manager.o(i.gcm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[42]">get_device_id_str</a> from ble_gap_mgr.o(i.get_device_id_str) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[5b]">get_erase_size</a> from ota_hal.o(i.get_erase_size) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[55]">get_size</a> from ota_hal.o(i.get_size) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[54]">get_status_register</a> from ota_hal.o(i.get_status_register) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[65]">gps_open</a> from i2cdev_hal.o(i.gps_open) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[98]">gscm_pdb_evt_handler</a> from gatts_cache_manager.o(i.gscm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[95]">im_pdb_evt_handler</a> from id_manager.o(i.im_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[9c]">irq_handler_for_instance_0</a> from nrf_drv_spi.o(i.irq_handler_for_instance_0) referenced from nrf_drv_spi.o(.constdata)
 <LI><a href="#[9d]">irq_handler_for_instance_1</a> from nrf_drv_twi.o(i.irq_handler_for_instance_1) referenced from nrf_drv_twi.o(.constdata)
 <LI><a href="#[5f]">isr_routine</a> from rtc_hal.o(i.isr_routine) referenced from rtc_hal.o(i.HalRtc_init)
 <LI><a href="#[85]">link_idle</a> from link.o(i.link_idle) referenced from link.o(i.link_idle)
 <LI><a href="#[85]">link_idle</a> from link.o(i.link_idle) referenced from link.o(i.link_init)
 <LI><a href="#[3]">link_init</a> from link.o(i.link_init) referenced 2 times from link.o(.data)
 <LI><a href="#[82]">link_start_auth</a> from link.o(i.link_start_auth) referenced from link.o(i.link_idle)
 <LI><a href="#[83]">link_wait_for_check_flag</a> from link.o(i.link_wait_for_check_flag) referenced from link.o(i.link_idle)
 <LI><a href="#[84]">link_write_link_info</a> from link.o(i.link_write_link_info) referenced from link.o(i.link_idle)
 <LI><a href="#[34]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[81]">nrf_drv_gpiote_callback</a> from exti_hal.o(i.nrf_drv_gpiote_callback) referenced from exti_hal.o(i.hw_exti_init)
 <LI><a href="#[72]">oled_open</a> from spidev_hal.o(i.oled_open) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[39]">open</a> from battmgr_hal.o(i.open) referenced from battmgr_hal.o(i.BattMgrHal_init)
 <LI><a href="#[57]">page_program</a> from ota_hal.o(i.page_program) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[93]">pdb_pds_evt_handler</a> from peer_database.o(i.pdb_pds_evt_handler) referenced from peer_data_storage.o(.constdata)
 <LI><a href="#[88]">pm_evt_handler</a> from ble_peripheral_task.o(i.pm_evt_handler) referenced from ble_peripheral_task.o(i.peer_manager_init)
 <LI><a href="#[1]">pm_gcm_evt_handler</a> from peer_manager.o(i.pm_gcm_evt_handler) referenced 2 times from gatt_cache_manager.o(.data)
 <LI><a href="#[91]">pm_im_evt_handler</a> from peer_manager.o(i.pm_im_evt_handler) referenced from id_manager.o(.constdata)
 <LI><a href="#[94]">pm_pdb_evt_handler</a> from peer_manager.o(i.pm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[9b]">pm_sm_evt_handler</a> from peer_manager.o(i.pm_sm_evt_handler) referenced from security_manager.o(.constdata)
 <LI><a href="#[64]">pmu_open</a> from i2cdev_hal.o(i.pmu_open) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[66]">ppg_open</a> from i2cdev_hal.o(i.ppg_open) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[8c]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[89]">prvTaskExitError</a> from port_cmsis.o(i.prvTaskExitError) referenced from port_cmsis.o(i.pxPortInitialiseStack)
 <LI><a href="#[8f]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[3a]">read</a> from battmgr_hal.o(i.read) referenced from battmgr_hal.o(i.BattMgrHal_init)
 <LI><a href="#[60]">read</a> from i2cdev_hal.o(i.read) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[6e]">read</a> from spidev_hal.o(i.read) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[3b]">read_async</a> from battmgr_hal.o(i.read_async) referenced from battmgr_hal.o(i.BattMgrHal_init)
 <LI><a href="#[56]">read_data</a> from ota_hal.o(i.read_data) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[46]">reboot_on_diconnect</a> from ble_gap_mgr.o(i.reboot_on_diconnect) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[4f]">reg_isr</a> from exti_hal.o(i.reg_isr) referenced from exti_hal.o(i.HalExti_init)
 <LI><a href="#[5d]">reg_isr</a> from rtc_hal.o(i.reg_isr) referenced from rtc_hal.o(i.HalRtc_init)
 <LI><a href="#[3c]">reg_usb_charger_event</a> from battmgr_hal.o(i.reg_usb_charger_event) referenced from battmgr_hal.o(i.BattMgrHal_init)
 <LI><a href="#[49]">register_task</a> from ble_gap_mgr.o(i.register_task) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[8a]">saadc_event_callback</a> from battmgr_hal.o(i.saadc_event_callback) referenced from battmgr_hal.o(i.read)
 <LI><a href="#[41]">set_adv_data</a> from ble_gap_mgr.o(i.set_adv_data) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[43]">set_device_name</a> from ble_gap_mgr.o(i.set_device_name) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[47]">set_fast_conn_para</a> from ble_gap_mgr.o(i.set_fast_conn_para) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[48]">set_slow_conn_para</a> from ble_gap_mgr.o(i.set_slow_conn_para) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[96]">sm_pdb_evt_handler</a> from security_manager.o(i.sm_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[99]">sm_smd_evt_handler</a> from security_manager.o(i.sm_smd_evt_handler) referenced from security_dispatcher.o(.constdata)
 <LI><a href="#[97]">smd_pdb_evt_handler</a> from security_dispatcher.o(i.smd_pdb_evt_handler) referenced from peer_database.o(.constdata)
 <LI><a href="#[8b]">softdevice_fault_handler</a> from softdevice_handler.o(i.softdevice_fault_handler) referenced from softdevice_handler.o(i.softdevice_handler_init)
 <LI><a href="#[8e]">spi_master_0_event_handler</a> from spidev_hal.o(i.spi_master_0_event_handler) referenced from spidev_hal.o(i.write_read)
 <LI><a href="#[5e]">start</a> from rtc_hal.o(i.start) referenced from rtc_hal.o(i.HalRtc_init)
 <LI><a href="#[3f]">start_adv</a> from ble_gap_mgr.o(i.start_adv) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[40]">stop_adv</a> from ble_gap_mgr.o(i.stop_adv) referenced from ble_gap_mgr.o(i.GapMgr_init)
 <LI><a href="#[78]">sys_evt_dispatch</a> from ble_peripheral_task.o(i.sys_evt_dispatch) referenced from ble_peripheral_task.o(i.ble_stack_init)
 <LI><a href="#[8d]">twi_handler</a> from i2cdev_hal.o(i.twi_handler) referenced from i2cdev_hal.o(i.write)
 <LI><a href="#[8d]">twi_handler</a> from i2cdev_hal.o(i.twi_handler) referenced from i2cdev_hal.o(i.write_read)
 <LI><a href="#[61]">write</a> from i2cdev_hal.o(i.write) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[6f]">write</a> from spidev_hal.o(i.write) referenced from spidev_hal.o(i.SpiDevHal_init)
 <LI><a href="#[53]">write_disable</a> from ota_hal.o(i.write_disable) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[52]">write_enable</a> from ota_hal.o(i.write_enable) referenced from ota_hal.o(i.HalOta_init)
 <LI><a href="#[62]">write_read</a> from i2cdev_hal.o(i.write_read) referenced from i2cdev_hal.o(i.I2CDevHal_init)
 <LI><a href="#[70]">write_read</a> from spidev_hal.o(i.write_read) referenced from spidev_hal.o(i.SpiDevHal_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[4c6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[9e]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4c8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4c9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4ca]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4cb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4bd]"></a>vPortStartFirstTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hardfault_handler_keil.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemoryManagement_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryManagement_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCM_AAR_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>COMP_LPCOMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>MWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>NFCT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>PDM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>PWM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>RTC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPIM2_SPIS2_SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SWI0_EGU0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SWI1_EGU1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SWI3_EGU3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>SWI4_EGU4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SWI5_EGU5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, arm_startup_nrf52.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[4cc]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_used_clusters
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEATHER_set_weather
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_Flash
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_ctrl_reg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_store_rx_msg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_register_rd_msg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_auth_stat_msg
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_one_pkt_from_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_file_list_msg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_daily_activity_info_msg
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rev_process
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mapk
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_forward
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_backward
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_dev_id
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_name
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_id_str
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>

<P><STRONG><a name="[236]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_on_diconnect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_advertising_init
</UL>

<P><STRONG><a name="[395]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>

<P><STRONG><a name="[4cd]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_BS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_ROOT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_setup
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleark
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_forward
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_backward
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
</UL>

<P><STRONG><a name="[bc]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_key
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLING_global_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_clear_fat_and_root_dir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_get_instance
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_get_instance
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_get_instance
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_create
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_display_restart
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_icon
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_charging
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_name
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_advertising_init
</UL>

<P><STRONG><a name="[4d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[117]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_name
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_id_str
</UL>

<P><STRONG><a name="[119]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
</UL>

<P><STRONG><a name="[298]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
</UL>

<P><STRONG><a name="[228]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>

<P><STRONG><a name="[16a]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_GetFineTime
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[a9]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ab]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[ac]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_sqrt
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_GetFineTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_sqrt
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_GetFineTime
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[4d2]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[262]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[263]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4d3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4d4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4d5]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[a7]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[b3]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[9f]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4d7]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[4d8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4d9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>AES_cbc_decrypt</STRONG> (Thumb, 262 bytes, Stack size 68 bytes, aes.o(i.AES_cbc_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AES_cbc_decrypt &rArr; AES_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_hncpy32
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_decrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>

<P><STRONG><a name="[329]"></a>AES_convert_key</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, aes.o(i.AES_convert_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES_convert_key
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>

<P><STRONG><a name="[b7]"></a>AES_decrypt</STRONG> (Thumb, 422 bytes, Stack size 84 bytes, aes.o(i.AES_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = AES_decrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_xtime
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_decrypt
</UL>

<P><STRONG><a name="[b9]"></a>AES_generateSBox</STRONG> (Thumb, 144 bytes, Stack size 272 bytes, aes.o(i.AES_generateSBox))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AES_generateSBox
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_get_global_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>

<P><STRONG><a name="[b6]"></a>AES_hncpy32</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.AES_hncpy32))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_key
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_decrypt
</UL>

<P><STRONG><a name="[bb]"></a>AES_set_key</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, aes.o(i.AES_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AES_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_hncpy32
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt
</UL>

<P><STRONG><a name="[b8]"></a>AES_xtime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes.o(i.AES_xtime))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_decrypt
</UL>

<P><STRONG><a name="[67]"></a>ALERT_notific_timer_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clingtask_ouptut.o(i.ALERT_notific_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ALERT_notific_timer_callback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> notific.o(i.NOTIFIC_state_machine)
</UL>
<P><STRONG><a name="[69]"></a>ALERT_reminder_timer_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clingtask_ouptut.o(i.ALERT_reminder_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ALERT_reminder_timer_callback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> reminder.o(i.REMINDER_state_machine)
</UL>
<P><STRONG><a name="[bf]"></a>ALERT_task_notific_notify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.ALERT_task_notific_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ALERT_task_notific_notify &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[c0]"></a>ALERT_task_reminder_notify</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.ALERT_task_reminder_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ALERT_task_reminder_notify &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[231]"></a>BASE_abs</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, base.o(i.BASE_abs))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_orientation
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_det_stationary
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_apu_p2p
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[227]"></a>BASE_calculate_occurance</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, base.o(i.BASE_calculate_occurance))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BASE_calculate_occurance
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_incidental_steps
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CAR_classify
</UL>

<P><STRONG><a name="[c1]"></a>BASE_delay_msec</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, base.o(i.BASE_delay_msec))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BASE_delay_msec &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_setup
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hw_reset
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_inertial_wake_up_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_init
</UL>

<P><STRONG><a name="[c3]"></a>BASE_sqrt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, base.o(i.BASE_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_det_stationary
</UL>

<P><STRONG><a name="[209]"></a>BATT_charging_det_for_sleep</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, batt.o(i.BATT_charging_det_for_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_monitor_allowed
</UL>

<P><STRONG><a name="[c5]"></a>BATT_device_unauthorized_shut_down</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, batt.o(i.BATT_device_unauthorized_shut_down))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BATT_device_unauthorized_shut_down &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorizing
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_system_powerdown
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_is_connected
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
</UL>

<P><STRONG><a name="[cc]"></a>BATT_event_process</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batt.o(i.BATT_event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BATT_event_process &rArr; BATT_interrupt_process &rArr; BATT_write_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_input
</UL>

<P><STRONG><a name="[1db]"></a>BATT_exit_charging_state</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, batt.o(i.BATT_exit_charging_state))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
</UL>

<P><STRONG><a name="[ce]"></a>BATT_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, batt.o(i.BATT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BATT_init &rArr; BATT_interrupt_process &rArr; BATT_write_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[cd]"></a>BATT_interrupt_process</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, batt.o(i.BATT_interrupt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = BATT_interrupt_process &rArr; BATT_write_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_read_reg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nofity_input_task_key_input_valid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_write_reg
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_event_process
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_init
</UL>

<P><STRONG><a name="[c8]"></a>BATT_is_charging</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, batt.o(i.BATT_is_charging))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_execute_adv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_battery_perc
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_update_charging_time
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_low_battery
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_home
</UL>

<P><STRONG><a name="[d2]"></a>BATT_is_low_battery</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, batt.o(i.BATT_is_low_battery))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BATT_is_low_battery
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_execute_adv
</UL>

<P><STRONG><a name="[d3]"></a>BATT_monitor_process</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, batt.o(i.BATT_monitor_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BATT_monitor_process &rArr; _battery_adc_idle &rArr; UI_turn_on_display &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
</UL>

<P><STRONG><a name="[d8]"></a>BATT_update_charging_time</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, batt.o(i.BATT_update_charging_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BATT_update_charging_time
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_process
</UL>

<P><STRONG><a name="[d9]"></a>BTLE_Send_Packet</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, btle.o(i.BTLE_Send_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BTLE_Send_Packet &rArr; cus_notify_send &rArr; tx_send &rArr; tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cus_notify_send
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_streaming
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_process
</UL>

<P><STRONG><a name="[db]"></a>BTLE_aes_decrypt</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, btle.o(i.BTLE_aes_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTLE_aes_decrypt &rArr; HalAes_get_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAes_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[dd]"></a>BTLE_aes_encrypt</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, btle.o(i.BTLE_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BTLE_aes_encrypt &rArr; HalAes_get_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAes_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
</UL>

<P><STRONG><a name="[de]"></a>BTLE_execute_adv</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, btle.o(i.BTLE_execute_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BTLE_execute_adv &rArr; BATT_is_low_battery
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_low_battery
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
</UL>

<P><STRONG><a name="[250]"></a>BTLE_get_radio_software_version</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, btle.o(i.BTLE_get_radio_software_version))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
</UL>

<P><STRONG><a name="[c9]"></a>BTLE_is_connected</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, btle.o(i.BTLE_is_connected))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[e5]"></a>BTLE_reset_streaming</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, btle.o(i.BTLE_reset_streaming))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sync_time_proc
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
</UL>

<P><STRONG><a name="[df]"></a>BTLE_state_machine_update</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, btle.o(i.BTLE_state_machine_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = BTLE_state_machine_update &rArr; BTLE_streaming_authorized &rArr; BTLE_update_streaming_minute_entries &rArr; FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_execute_adv
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_fsm_process
</UL>

<P><STRONG><a name="[e1]"></a>BTLE_streaming_authorized</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, btle.o(i.BTLE_streaming_authorized))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = BTLE_streaming_authorized &rArr; BTLE_update_streaming_minute_entries &rArr; FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_minute_msg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_file_minute_msg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_daily_msg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_update_streaming_minute_entries
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_reset_streaming
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
</UL>

<P><STRONG><a name="[245]"></a>BTLE_tx_buffer_available</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btle.o(i.BTLE_tx_buffer_available))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[e6]"></a>BTLE_update_streaming_minute_entries</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, btle.o(i.BTLE_update_streaming_minute_entries))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = BTLE_update_streaming_minute_entries &rArr; FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
</UL>

<P><STRONG><a name="[ec]"></a>BattMgrHal_get_instance</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, battmgr_hal.o(i.BattMgrHal_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BattMgrHal_get_instance &rArr; BattMgrHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
</UL>

<P><STRONG><a name="[f0]"></a>CLING_global_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clingtask.o(i.CLING_global_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CLING_global_init &rArr; RTC_get_local_clock &rArr; RTC_get_regular_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[f2]"></a>CLING_task_rtc_notify</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, clingtask.o(i.CLING_task_rtc_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLING_task_rtc_notify &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_handler
</UL>

<P><STRONG><a name="[d4]"></a>CLK_get_system_time</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, base.o(i.CLK_get_system_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_GetFineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_monitor_process
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_connect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rev_process
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_up_random_characters
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_idle
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_enter_low_power_mode
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_activity_per_minute
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_low_power_process_hw
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[f4]"></a>CP_API_received_pkt</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, cp.o(i.CP_API_received_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CP_API_received_pkt &rArr; _rx_sp_msg_process &rArr; _write_ctrl_reg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_store_rx_msg
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rx_sp_msg_process
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[f7]"></a>CP_create_auth_stat_msg</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, cp.o(i.CP_create_auth_stat_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CP_create_auth_stat_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[f9]"></a>CP_create_register_rd_msg</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, cp.o(i.CP_create_register_rd_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CP_create_register_rd_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rx_sp_msg_process
</UL>

<P><STRONG><a name="[ea]"></a>CP_create_streaming_daily_msg</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, cp.o(i.CP_create_streaming_daily_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CP_create_streaming_daily_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
</UL>

<P><STRONG><a name="[e8]"></a>CP_create_streaming_file_minute_msg</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, cp.o(i.CP_create_streaming_file_minute_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = CP_create_streaming_file_minute_msg &rArr; FLASH_Write_Flash &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_Flash
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_Flash
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fillup_streaming_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
</UL>

<P><STRONG><a name="[e7]"></a>CP_create_streaming_minute_msg</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, cp.o(i.CP_create_streaming_minute_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = CP_create_streaming_minute_msg &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fillup_streaming_packet
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
</UL>

<P><STRONG><a name="[ff]"></a>CP_state_machine_update</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, cp.o(i.CP_state_machine_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = CP_state_machine_update &rArr; _core_cp_packet_handling &rArr; _pending_process &rArr; _write_file_to_fs_head &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_fsm_process
</UL>

<P><STRONG><a name="[1e6]"></a>CRCCCITT</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, system.o(i.CRCCCITT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CRCCCITT
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CRC
</UL>

<P><STRONG><a name="[101]"></a>FAT_BuildChain</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fs_fat.o(i.FAT_BuildChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_fat_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_to_flash
</UL>

<P><STRONG><a name="[127]"></a>FAT_CheckSpace</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fs_fat.o(i.FAT_CheckSpace))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
</UL>

<P><STRONG><a name="[128]"></a>FAT_ClearEntries</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, fs_fat.o(i.FAT_ClearEntries))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_FAT
</UL>

<P><STRONG><a name="[103]"></a>FAT_GetEmptyEntry</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, fs_fat.o(i.FAT_GetEmptyEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = FAT_GetEmptyEntry &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_to_flash
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
</UL>

<P><STRONG><a name="[106]"></a>FAT_GetNextChain</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_fat.o(i.FAT_GetNextChain))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = FAT_GetNextChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_fat_page
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_step_read_index
</UL>

<P><STRONG><a name="[107]"></a>FAT_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fs_fat.o(i.FAT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_used_clusters
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
</UL>

<P><STRONG><a name="[109]"></a>FAT_chk_mounted</STRONG> (Thumb, 228 bytes, Stack size 152 bytes, fs_fat.o(i.FAT_chk_mounted))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = FAT_chk_mounted &rArr; _check_fs &rArr; FLASH_Read_BS &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_BS
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_I16U
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[10d]"></a>FAT_clear_fat_and_root_dir</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fs_fat.o(i.FAT_clear_fat_and_root_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = FAT_clear_fat_and_root_dir &rArr; FAT_create_fs &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
</UL>

<P><STRONG><a name="[10e]"></a>FAT_create_fs</STRONG> (Thumb, 502 bytes, Stack size 168 bytes, fs_fat.o(i.FAT_create_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = FAT_create_fs &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_BS
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_clear_fat_and_root_dir
</UL>

<P><STRONG><a name="[111]"></a>FAT_flush_map</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fs_fat.o(i.FAT_flush_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = FAT_flush_map &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[112]"></a>FILE_GetFileNum</STRONG> (Thumb, 94 bytes, Stack size 184 bytes, fs_file.o(i.FILE_GetFileNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = FILE_GetFileNum &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_file_list_msg
</UL>

<P><STRONG><a name="[118]"></a>FILE_delete</STRONG> (Thumb, 72 bytes, Stack size 176 bytes, fs_file.o(i.FILE_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = FILE_delete &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_DeleteFile
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_file_from_fs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
</UL>

<P><STRONG><a name="[eb]"></a>FILE_exists_with_prefix</STRONG> (Thumb, 128 bytes, Stack size 200 bytes, fs_file.o(i.FILE_exists_with_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = FILE_exists_with_prefix &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_update_streaming_minute_entries
</UL>

<P><STRONG><a name="[11b]"></a>FILE_fclose</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fs_file.o(i.FILE_fclose))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_to_flash
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_flush_map
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_flush_item
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileType
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileCRC
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetLastPos
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileType
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_CloseWriteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
</UL>

<P><STRONG><a name="[113]"></a>FILE_fclose_force</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fs_file.o(i.FILE_fclose_force))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_set_state
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_radio_state_cleanup
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
</UL>

<P><STRONG><a name="[25c]"></a>FILE_feof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fs_file.o(i.FILE_feof))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
</UL>

<P><STRONG><a name="[125]"></a>FILE_fopen</STRONG> (Thumb, 310 bytes, Stack size 344 bytes, fs_file.o(i.FILE_fopen))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEmptyEntry
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClearEntries
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CheckSpace
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_OpenReadFile
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_CreateFile
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
</UL>

<P><STRONG><a name="[12a]"></a>FILE_fread</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, fs_file.o(i.FILE_fread))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FILE_fread &rArr; _read_flash_cache &rArr; _step_read_index &rArr; FAT_GetNextChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_flash_cache
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[12c]"></a>FILE_fwrite</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, fs_file.o(i.FILE_fwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = FILE_fwrite &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_to_flash
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CRC
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
</UL>

<P><STRONG><a name="[12e]"></a>FILE_getFileInfo</STRONG> (Thumb, 204 bytes, Stack size 200 bytes, fs_file.o(i.FILE_getFileInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = FILE_getFileInfo &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_file_list_msg
</UL>

<P><STRONG><a name="[e9]"></a>FILE_get_next_file_with_prefix</STRONG> (Thumb, 172 bytes, Stack size 208 bytes, fs_file.o(i.FILE_get_next_file_with_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_DeleteFile
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_update_streaming_minute_entries
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
</UL>

<P><STRONG><a name="[12f]"></a>FILE_if_exists</STRONG> (Thumb, 70 bytes, Stack size 176 bytes, fs_file.o(i.FILE_if_exists))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = FILE_if_exists &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[130]"></a>FILE_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_file.o(i.FILE_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = FILE_init &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_file_from_fs
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_Read_App</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, fs_flash.o(i.FLASH_Read_App))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_total
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_stat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_sleep
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_minute_msg
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_init
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_statistics
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_activity
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_by_noon
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_set_next_reminder
</UL>

<P><STRONG><a name="[10a]"></a>FLASH_Read_BS</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Read_BS))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FLASH_Read_BS &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_chk_mounted
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fs
</UL>

<P><STRONG><a name="[105]"></a>FLASH_Read_FAT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Read_FAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEmptyEntry
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_fat_page
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_used_clusters
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[fa]"></a>FLASH_Read_Flash</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Read_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FLASH_Read_Flash &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_file_minute_msg
</UL>

<P><STRONG><a name="[134]"></a>FLASH_Read_ROOT</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Read_ROOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FLASH_Read_ROOT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_init
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_Write_App</STRONG> (Thumb, 54 bytes, Stack size 152 bytes, fs_flash.o(i.FLASH_Write_App))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_setup
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_minute_msg
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
</UL>

<P><STRONG><a name="[10f]"></a>FLASH_Write_BS</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Write_BS))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FLASH_Write_BS &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
</UL>

<P><STRONG><a name="[104]"></a>FLASH_Write_FAT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Write_FAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_flush_map
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEmptyEntry
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_fat_page
</UL>

<P><STRONG><a name="[fb]"></a>FLASH_Write_Flash</STRONG> (Thumb, 34 bytes, Stack size 144 bytes, fs_flash.o(i.FLASH_Write_Flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = FLASH_Write_Flash &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_file_minute_msg
</UL>

<P><STRONG><a name="[136]"></a>FLASH_Write_ROOT</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_Write_ROOT))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_flush_item
</UL>

<P><STRONG><a name="[132]"></a>FLASH_addr_validation</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fs_flash.o(i.FLASH_addr_validation))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = FLASH_addr_validation &rArr; FLASH_erase_all &rArr; FLASH_erase_file_system &rArr; _core_erase &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_reboot
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_all
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_BS
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_BS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_ROOT
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_ROOT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_data
</UL>

<P><STRONG><a name="[139]"></a>FLASH_erase_App</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, fs_flash.o(i.FLASH_erase_App))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = FLASH_erase_App &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_setup
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_deauthorize
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[137]"></a>FLASH_erase_all</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_erase_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FLASH_erase_all &rArr; FLASH_erase_file_system &rArr; _core_erase &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_file_system
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_application_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>

<P><STRONG><a name="[13c]"></a>FLASH_erase_application_data</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_erase_application_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FLASH_erase_application_data &rArr; _core_erase &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_all
</UL>

<P><STRONG><a name="[13b]"></a>FLASH_erase_file_system</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_erase_file_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FLASH_erase_file_system &rArr; _core_erase &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_all
</UL>

<P><STRONG><a name="[13e]"></a>FLASH_read_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FLASH_read_data &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_flash_cache
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
</UL>

<P><STRONG><a name="[13f]"></a>FLASH_write_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fs_flash.o(i.FLASH_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = FLASH_write_data &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_to_flash
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_CreateFile
</UL>

<P><STRONG><a name="[15]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 554 bytes, Stack size 72 bytes, nrf_drv_gpiote.o(i.GPIOTE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GPIOTE_IRQHandler &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_ports_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_bitmask_bit_is_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[239]"></a>GPIO_charger_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_api.o(i.GPIO_charger_reset))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
</UL>

<P><STRONG><a name="[cb]"></a>GPIO_system_powerdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_api.o(i.GPIO_system_powerdown))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_battery_perc
</UL>

<P><STRONG><a name="[147]"></a>GPIO_vibrator_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio_api.o(i.GPIO_vibrator_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_vibrator_set &rArr; pin_set_low &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_low
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
</UL>

<P><STRONG><a name="[14a]"></a>GapMgr_get_instance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ble_gap_mgr.o(i.GapMgr_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GapMgr_get_instance &rArr; GapMgr_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_reboot
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
</UL>

<P><STRONG><a name="[14b]"></a>GapMgr_init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ble_gap_mgr.o(i.GapMgr_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GapMgr_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
</UL>

<P><STRONG><a name="[14d]"></a>HOMEKEY_check_on_click_event</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, homekey.o(i.HOMEKEY_check_on_click_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HOMEKEY_check_on_click_event &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_is_idle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_input
</UL>

<P><STRONG><a name="[dc]"></a>HalAes_get_instance</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, aes_hal.o(i.HalAes_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HalAes_get_instance
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAes_init
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_aes_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_aes_decrypt
</UL>

<P><STRONG><a name="[151]"></a>HalAes_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, aes_hal.o(i.HalAes_init))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalAes_get_instance
</UL>

<P><STRONG><a name="[152]"></a>HalExti_get_instance</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, exti_hal.o(i.HalExti_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HalExti_get_instance &rArr; HalExti_init &rArr; hw_exti_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalExti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFE_touch_key_init
</UL>

<P><STRONG><a name="[156]"></a>HalOta_get_instance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ota_hal.o(i.HalOta_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HalOta_get_instance &rArr; HalOta_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
</UL>

<P><STRONG><a name="[158]"></a>HalRtc_get_instance</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtc_hal.o(i.HalRtc_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HalRtc_get_instance &rArr; HalRtc_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[35]"></a>HardFault_c_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_c_handler))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardfault_handler_keil.o(.emb_text)
</UL>
<P><STRONG><a name="[15a]"></a>HardFault_process</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, hardfault_implementation.o(i.HardFault_process))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_c_handler
</UL>

<P><STRONG><a name="[d7]"></a>I2CDevHal_get_instance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2cdev_hal.o(i.I2CDevHal_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_read_reg
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_write_reg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppg_read_reg
</UL>

<P><STRONG><a name="[10c]"></a>LD_I16U</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fs_fat.o(i.LD_I16U))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_chk_mounted
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fs
</UL>

<P><STRONG><a name="[23d]"></a>LD_I32U</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fs_fat.o(i.LD_I32U))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_fs
</UL>

<P><STRONG><a name="[15c]"></a>LINK_deauthorize</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, link.o(i.LINK_deauthorize))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LINK_deauthorize &rArr; FLASH_erase_App &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
</UL>

<P><STRONG><a name="[15d]"></a>LINK_init</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, link.o(i.LINK_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LINK_init &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[c6]"></a>LINK_is_authorized</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, link.o(i.LINK_is_authorized))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_execute_adv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_acquired
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_set_next_reminder
</UL>

<P><STRONG><a name="[c7]"></a>LINK_is_authorizing</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, link.o(i.LINK_is_authorizing))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
</UL>

<P><STRONG><a name="[15f]"></a>LINK_start_authorizing</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, link.o(i.LINK_start_authorizing))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LINK_start_authorizing &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_is_idle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
</UL>

<P><STRONG><a name="[160]"></a>LINK_state_machine_update</STRONG> (Thumb, 6290 bytes, Stack size 80 bytes, link.o(i.LINK_state_machine_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = LINK_state_machine_update &rArr; TRACKING_total_data_load_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_get_global_buffer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_mutex
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_auth_stat_msg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_aes_encrypt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_aes_decrypt
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_initialization
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_set_step_detection_sensitivity
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_toupper
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mapk
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_up_random_characters
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cleark
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_HexToAscii
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_AsciiToHex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_fsm_process
</UL>

<P><STRONG><a name="[16e]"></a>LIS3DH_get_interrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_get_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LIS3DH_get_interrupt &rArr; _get_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
</UL>

<P><STRONG><a name="[170]"></a>LIS3DH_inertial_wake_up_init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_inertial_wake_up_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LIS3DH_inertial_wake_up_init &rArr; BASE_delay_msec &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_enter_low_power_mode
</UL>

<P><STRONG><a name="[172]"></a>LIS3DH_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = LIS3DH_init &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_who_am_i
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_normal_FIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_init
</UL>

<P><STRONG><a name="[176]"></a>LIS3DH_is_FIFO_ready</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_is_FIFO_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LIS3DH_is_FIFO_ready &rArr; _get_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[175]"></a>LIS3DH_normal_FIFO</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_normal_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LIS3DH_normal_FIFO &rArr; _set_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_init
</UL>

<P><STRONG><a name="[177]"></a>LIS3DH_retrieve_data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_retrieve_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LIS3DH_retrieve_data &rArr; _get_data
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[174]"></a>LIS3DH_who_am_i</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lis3dh.o(i.LIS3DH_who_am_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LIS3DH_who_am_i &rArr; _get_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_init
</UL>

<P><STRONG><a name="[133]"></a>NFLASH_drv_read_sector</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_nflash_rw.o(i.NFLASH_drv_read_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_BS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_Flash
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_ROOT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_data
</UL>

<P><STRONG><a name="[13a]"></a>NFLASH_drv_sector_erasure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, fs_nflash_rw.o(i.NFLASH_drv_sector_erasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_erase
</UL>

<P><STRONG><a name="[135]"></a>NFLASH_drv_write_sector</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fs_nflash_rw.o(i.NFLASH_drv_write_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_pageProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_BS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_Flash
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_ROOT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_data
</UL>

<P><STRONG><a name="[17f]"></a>NFLASH_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, fs_nflash_rw.o(i.NFLASH_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = NFLASH_init &rArr; NOR_init &rArr; NOR_readID &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[17d]"></a>NOR_ChipErase</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_ChipErase))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = NOR_ChipErase &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
</UL>

<P><STRONG><a name="[17b]"></a>NOR_erase_block_32k</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_erase_block_32k))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = NOR_erase_block_32k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
</UL>

<P><STRONG><a name="[17a]"></a>NOR_erase_block_4k</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_erase_block_4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = NOR_erase_block_4k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
</UL>

<P><STRONG><a name="[17c]"></a>NOR_erase_block_64k</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_erase_block_64k))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
</UL>

<P><STRONG><a name="[180]"></a>NOR_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = NOR_init &rArr; NOR_readID &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_init
</UL>

<P><STRONG><a name="[17e]"></a>NOR_pageProgram</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, nflash_spi.o(i.NOR_pageProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_write_sector
</UL>

<P><STRONG><a name="[185]"></a>NOR_powerDown</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_powerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NOR_powerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_pageProgram
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>

<P><STRONG><a name="[179]"></a>NOR_readData</STRONG> (Thumb, 100 bytes, Stack size 288 bytes, nflash_spi.o(i.NOR_readData))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_read_sector
</UL>

<P><STRONG><a name="[186]"></a>NOR_readID</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_readID))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NOR_readID &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_init
</UL>

<P><STRONG><a name="[188]"></a>NOR_readStatusRegister</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_readStatusRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NOR_readStatusRegister &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
</UL>

<P><STRONG><a name="[181]"></a>NOR_releasePowerDown</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_releasePowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_pageProgram
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>

<P><STRONG><a name="[182]"></a>NOR_writeEnable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nflash_spi.o(i.NOR_writeEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>

<P><STRONG><a name="[189]"></a>NOTIFIC_state_machine</STRONG> (Thumb, 768 bytes, Stack size 32 bytes, notific.o(i.NOTIFIC_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NOTIFIC_state_machine &rArr; SYSCLK_get_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vibrator_set
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
</UL>

<P><STRONG><a name="[18c]"></a>NOTIFIC_stop_notifying</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, notific.o(i.NOTIFIC_stop_notifying))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NOTIFIC_stop_notifying &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
</UL>

<P><STRONG><a name="[18d]"></a>OLED_full_scree_show</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, oled.o(i.OLED_full_scree_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_full_scree_show &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_data
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_test
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
</UL>

<P><STRONG><a name="[190]"></a>OLED_hw_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.OLED_hw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OLED_hw_reset &rArr; BASE_delay_msec &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_on
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_test
</UL>

<P><STRONG><a name="[193]"></a>OLED_init</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, oled.o(i.OLED_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_init &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_test
</UL>

<P><STRONG><a name="[191]"></a>OLED_power_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled.o(i.OLED_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_power_off &rArr; pin_set_low &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_low
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hw_reset
</UL>

<P><STRONG><a name="[192]"></a>OLED_power_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled.o(i.OLED_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OLED_power_on &rArr; pin_set_high &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_high
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hw_reset
</UL>

<P><STRONG><a name="[194]"></a>OLED_set_display</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, oled.o(i.OLED_set_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_on
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_off
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
</UL>

<P><STRONG><a name="[195]"></a>OLED_set_panel_off</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, oled.o(i.OLED_set_panel_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_set_panel_off &rArr; UI_task_notify_oled &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_oled
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[14e]"></a>OLED_set_panel_on</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, oled.o(i.OLED_set_panel_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_set_panel_on &rArr; notify_ble_to_switch_adv_frequnce &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_ble_to_switch_adv_frequnce
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_oled
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[198]"></a>OLED_state_machine</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, oled.o(i.OLED_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = OLED_state_machine &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_rendering
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hw_reset
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
</UL>

<P><STRONG><a name="[e3]"></a>OTA_if_enabled</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ota.o(i.OTA_if_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_pageProgram
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readID
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[19a]"></a>OTA_main</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota.o(i.OTA_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = OTA_main &rArr; _start_OTA &rArr; SYSTEM_restart_from_reset_vector &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_OTA
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
</UL>

<P><STRONG><a name="[124]"></a>OTA_set_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ota.o(i.OTA_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OTA_set_state &rArr; UI_turn_on_display &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
</UL>

<P><STRONG><a name="[19d]"></a>PEDO_create</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, pedo.o(i.PEDO_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PEDO_create
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_initialization
</UL>

<P><STRONG><a name="[ba]"></a>PEDO_get_global_buffer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pedo.o(i.PEDO_get_global_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_generateSBox
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_idle
</UL>

<P><STRONG><a name="[1f8]"></a>PEDO_get_motion_type</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pedo.o(i.PEDO_get_motion_type))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
</UL>

<P><STRONG><a name="[268]"></a>PEDO_is_transport_mode</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pedo.o(i.PEDO_is_transport_mode))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_noise_non_step
</UL>

<P><STRONG><a name="[19e]"></a>PEDO_main</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, pedo.o(i.PEDO_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PEDO_main &rArr; _det_stationary &rArr; BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_set_step_detection_sensitivity
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_processing
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_step_count
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_pedo_stationary
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_norm_A
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lpf
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_det_stationary
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_steps_buffer
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_up_random_steps
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_classifier_stat_update
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_mag
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adj_g_est
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
</UL>

<P><STRONG><a name="[16c]"></a>PEDO_set_step_detection_sensitivity</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, pedo.o(i.PEDO_set_step_detection_sensitivity))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
</UL>

<P><STRONG><a name="[f]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.POWER_CLOCK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = POWER_CLOCK_IRQHandler &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_disable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_check
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>PPG_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ppg.o(i.PPG_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PPG_init &rArr; ppg_read_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppg_read_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
</UL>

<P><STRONG><a name="[1b1]"></a>REMINDER_set_next_reminder</STRONG> (Thumb, 306 bytes, Stack size 168 bytes, reminder.o(i.REMINDER_set_next_reminder))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = REMINDER_set_next_reminder &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
</UL>

<P><STRONG><a name="[1b2]"></a>REMINDER_setup</STRONG> (Thumb, 232 bytes, Stack size 176 bytes, reminder.o(i.REMINDER_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = REMINDER_setup &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[1b3]"></a>REMINDER_state_machine</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, reminder.o(i.REMINDER_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = REMINDER_state_machine &rArr; REMINDER_set_next_reminder &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vibrator_set
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_set_next_reminder
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
</UL>

<P><STRONG><a name="[121]"></a>ROOT_CloseWriteFile</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_CloseWriteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_CloseWriteFile &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[129]"></a>ROOT_CreateFile</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_CreateFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_CreateFile &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
</UL>

<P><STRONG><a name="[11a]"></a>ROOT_DeleteFile</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fs_root.o(i.ROOT_DeleteFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ROOT_DeleteFile &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_FAT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_flush_item
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
</UL>

<P><STRONG><a name="[115]"></a>ROOT_GetFileInfo</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_GetFileInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_GetFileInfo &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
</UL>

<P><STRONG><a name="[116]"></a>ROOT_GetFileName</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_GetFileName))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_GetFileName &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
</UL>

<P><STRONG><a name="[11d]"></a>ROOT_GetFileType</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fs_root.o(i.ROOT_GetFileType))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ROOT_GetFileType &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[123]"></a>ROOT_GetLastPos</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, fs_root.o(i.ROOT_GetLastPos))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ROOT_GetLastPos &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_init
</UL>

<P><STRONG><a name="[114]"></a>ROOT_ListFiles</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fs_root.o(i.ROOT_ListFiles))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_get_next_file_with_prefix
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
</UL>

<P><STRONG><a name="[126]"></a>ROOT_OpenReadFile</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_OpenReadFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_OpenReadFile &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
</UL>

<P><STRONG><a name="[11f]"></a>ROOT_SetFileCRC</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_SetFileCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_SetFileCRC &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[120]"></a>ROOT_SetFileTime</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_SetFileTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_SetFileTime &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[11e]"></a>ROOT_SetFileType</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fs_root.o(i.ROOT_SetFileType))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_SetFileType &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[122]"></a>ROOT_flush_item</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, fs_root.o(i.ROOT_flush_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_ROOT
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_swap_root_page
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_DeleteFile
</UL>

<P><STRONG><a name="[131]"></a>ROOT_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs_root.o(i.ROOT_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = ROOT_init &rArr; ROOT_GetLastPos &rArr; _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_ROOT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetLastPos
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
</UL>

<P><STRONG><a name="[20]"></a>RTC1_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC1_IRQHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>RTC_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RTC_Init &rArr; HalRtc_get_instance &rArr; HalRtc_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRtc_get_instance
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[1ba]"></a>RTC_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(i.RTC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[1bb]"></a>RTC_get_delta_clock_backward</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, rtc.o(i.RTC_get_delta_clock_backward))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_get_delta_clock_backward &rArr; RTC_get_regular_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_regular_time
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_statistics
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_activity
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
</UL>

<P><STRONG><a name="[203]"></a>RTC_get_epoch_day_start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtc.o(i.RTC_get_epoch_day_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_get_epoch_day_start
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_total
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_stat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_sleep
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_by_noon
</UL>

<P><STRONG><a name="[f1]"></a>RTC_get_local_clock</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, rtc.o(i.RTC_get_local_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_get_local_clock &rArr; RTC_get_regular_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_regular_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_process
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLING_global_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sync_time_proc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fillup_streaming_packet
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[1bc]"></a>RTC_get_regular_time</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, rtc.o(i.RTC_get_regular_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_get_regular_time
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_delta_clock_backward
</UL>

<P><STRONG><a name="[6a]"></a>RTC_timer_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtc.o(i.RTC_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTC_timer_handler &rArr; CLING_task_rtc_notify &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLING_task_rtc_notify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc.o(i.RTC_Init)
</UL>
<P><STRONG><a name="[1bd]"></a>RTC_timer_process</STRONG> (Thumb, 522 bytes, Stack size 32 bytes, rtc.o(i.RTC_timer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RTC_timer_process &rArr; RTC_get_local_clock &rArr; RTC_get_regular_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_update_charging_time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
</UL>

<P><STRONG><a name="[16]"></a>SAADC_IRQHandler</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, nrf_drv_saadc.o(i.SAADC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SAADC_IRQHandler &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1c3]"></a>SEGGER_RTT_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, segger_rtt.o(i.SEGGER_RTT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SEGGER_RTT_Init &rArr; _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_init
</UL>

<P><STRONG><a name="[1c5]"></a>SEGGER_RTT_SetTerminal</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_SetTerminal))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_SetTerminal &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_init
</UL>

<P><STRONG><a name="[1cb]"></a>SEGGER_RTT_Write</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1cc]"></a>SEGGER_RTT_WriteNoLock</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, segger_rtt.o(i.SEGGER_RTT_WriteNoLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteNoCheck
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WriteBlocking
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[1cd]"></a>SENSOR_accel_processing</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, sensor.o(i.SENSOR_accel_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = SENSOR_accel_processing &rArr; _high_power_process_FIFO &rArr; TRACKING_algorithms_proc &rArr; PEDO_main &rArr; _det_stationary &rArr; BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_get_interrupt
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_algorithms_proc
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_low_power_process_hw
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_validate_accel_int
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
</UL>

<P><STRONG><a name="[1d2]"></a>SENSOR_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sensor.o(i.SENSOR_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SENSOR_init &rArr; LIS3DH_init &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[6b]"></a>SFE_exti_callback</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, clingtask_input.o(i.SFE_exti_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SFE_exti_callback &rArr; xTaskNotifyFromISR &rArr; ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clingtask_input.o(i.SFE_touch_key_init)
</UL>
<P><STRONG><a name="[1d5]"></a>SFE_touch_key_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clingtask_input.o(i.SFE_touch_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SFE_touch_key_init &rArr; HalExti_get_instance &rArr; HalExti_init &rArr; hw_exti_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalExti_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[1ce]"></a>SLEEP_algorithms_proc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sleep.o(i.SLEEP_algorithms_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SLEEP_algorithms_proc &rArr; _calc_activity_per_minute &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_main_state
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_activity_per_minute
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[1d3]"></a>SLEEP_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sleep.o(i.SLEEP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SLEEP_init &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_main_state
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_init
</UL>

<P><STRONG><a name="[1d9]"></a>SLEEP_is_sleep_state</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(i.SLEEP_is_sleep_state))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_activity_per_minute
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_low_power_process_hw
</UL>

<P><STRONG><a name="[1d8]"></a>SLEEP_minute_proc</STRONG> (Thumb, 626 bytes, Stack size 32 bytes, sleep.o(i.SLEEP_minute_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SLEEP_minute_proc &rArr; _wristband_not_wearing_detection
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_exit_charging_state
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_set_step_detection_sensitivity
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wristband_not_wearing_detection
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_stationary_mins
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_activity_status_register
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_is_sleep_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[20a]"></a>SLEEP_wake_up_by_force</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sleep.o(i.SLEEP_wake_up_by_force))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
</UL>

<P><STRONG><a name="[12]"></a>SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_drv_common.o(i.SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf_drv_common.o(i.SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SWI2_EGU2_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, softdevice_handler.o(i.SWI2_EGU2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SWI2_EGU2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>SYSCLK_GetFineTime</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sysclk.o(i.SYSCLK_GetFineTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
</UL>

<P><STRONG><a name="[18a]"></a>SYSCLK_get_timer</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sysclk.o(i.SYSCLK_get_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SYSCLK_get_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[18b]"></a>SYSCLK_restart_timer</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sysclk.o(i.SYSCLK_restart_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SYSCLK_restart_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_button_click
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
</UL>

<P><STRONG><a name="[1e0]"></a>SYSTEM_CLING_init</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, system.o(i.SYSTEM_CLING_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = SYSTEM_CLING_init &rArr; _critical_info_restored &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_map_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLING_global_init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFE_touch_key_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_clear_fat_and_root_dir
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_chk_mounted
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_set_step_detection_sensitivity
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_application_data
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_all
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_data_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_init
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_startup_logging
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
</UL>

<P><STRONG><a name="[12d]"></a>SYSTEM_CRC</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, system.o(i.SYSTEM_CRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SYSTEM_CRC &rArr; CRCCCITT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRCCCITT
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
</UL>

<P><STRONG><a name="[1e7]"></a>SYSTEM_backup_critical</STRONG> (Thumb, 280 bytes, Stack size 96 bytes, system.o(i.SYSTEM_backup_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_store_device_param
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[1e9]"></a>SYSTEM_factory_reset</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, system.o(i.SYSTEM_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SYSTEM_factory_reset &rArr; SYSTEM_format_disk &rArr; FAT_clear_fat_and_root_dir &rArr; FAT_create_fs &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_deauthorize
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_is_connected
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
</UL>

<P><STRONG><a name="[1ea]"></a>SYSTEM_format_disk</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, system.o(i.SYSTEM_format_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = SYSTEM_format_disk &rArr; FAT_clear_fat_and_root_dir &rArr; FAT_create_fs &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_clear_fat_and_root_dir
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_all
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
</UL>

<P><STRONG><a name="[1eb]"></a>SYSTEM_get_ble_code</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, system.o(i.SYSTEM_get_ble_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SYSTEM_get_ble_code &rArr; SYSTEM_get_dev_id &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_dev_id
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[1ec]"></a>SYSTEM_get_dev_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system.o(i.SYSTEM_get_dev_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SYSTEM_get_dev_id &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_ble_code
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_name
</UL>

<P><STRONG><a name="[166]"></a>SYSTEM_get_mutex</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.SYSTEM_get_mutex))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[138]"></a>SYSTEM_reboot</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, system.o(i.SYSTEM_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SYSTEM_reboot &rArr; GapMgr_get_instance &rArr; GapMgr_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
</UL>

<P><STRONG><a name="[161]"></a>SYSTEM_release_mutex</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, system.o(i.SYSTEM_release_mutex))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_one_pkt_from_msg
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_file_list_msg
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_radio_state_cleanup
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[e4]"></a>SYSTEM_restart_from_reset_vector</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, system.o(i.SYSTEM_restart_from_reset_vector))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = SYSTEM_restart_from_reset_vector &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_reboot
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_disconnect_clean_up
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_start_OTA
</UL>

<P><STRONG><a name="[173]"></a>SpiDevHal_get_instance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, spidev_hal.o(i.SpiDevHal_get_instance))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_tx_rx
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_init
</UL>

<P><STRONG><a name="[1f6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_nrf52.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 532 bytes, Stack size 8 bytes, system_nrf52.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_66
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_57
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_37
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_36
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_32
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_31
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_16
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errata_108
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(.text)
</UL>
<P><STRONG><a name="[28d]"></a>TOUCH_get_gesture_panel</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, touch.o(i.TOUCH_get_gesture_panel))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[1f7]"></a>TRACKING_algorithms_proc</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, tracking.o(i.TRACKING_algorithms_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TRACKING_algorithms_proc &rArr; PEDO_main &rArr; _det_stationary &rArr; BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_get_motion_type
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_enter_low_power_mode
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_stride_length
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[1fb]"></a>TRACKING_data_logging</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tracking.o(i.TRACKING_data_logging))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = TRACKING_data_logging &rArr; _logging_per_minute &rArr; _minute_data_flush_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_by_noon
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
</UL>

<P><STRONG><a name="[1f9]"></a>TRACKING_enter_low_power_mode</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tracking.o(i.TRACKING_enter_low_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TRACKING_enter_low_power_mode &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_inertial_wake_up_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
</UL>

<P><STRONG><a name="[1ff]"></a>TRACKING_exit_low_power_mode</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, tracking.o(i.TRACKING_exit_low_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TRACKING_exit_low_power_mode &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_initialization
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_set_step_detection_sensitivity
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_normal_FIFO
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_low_power_process_hw
</UL>

<P><STRONG><a name="[200]"></a>TRACKING_get_activity</STRONG> (Thumb, 710 bytes, Stack size 144 bytes, tracking.o(i.TRACKING_get_activity))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_statistics
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_delta_clock_backward
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[202]"></a>TRACKING_get_daily_streaming_sleep</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, tracking.o(i.TRACKING_get_daily_streaming_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = TRACKING_get_daily_streaming_sleep &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_epoch_day_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_daily_activity_info_msg
</UL>

<P><STRONG><a name="[204]"></a>TRACKING_get_daily_streaming_stat</STRONG> (Thumb, 272 bytes, Stack size 80 bytes, tracking.o(i.TRACKING_get_daily_streaming_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = TRACKING_get_daily_streaming_stat &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_epoch_day_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_daily_activity_info_msg
</UL>

<P><STRONG><a name="[205]"></a>TRACKING_get_daily_total</STRONG> (Thumb, 326 bytes, Stack size 80 bytes, tracking.o(i.TRACKING_get_daily_total))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = TRACKING_get_daily_total &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_epoch_day_start
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sync_time_proc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[1fe]"></a>TRACKING_get_sleep_by_noon</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, tracking.o(i.TRACKING_get_sleep_by_noon))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = TRACKING_get_sleep_by_noon &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_epoch_day_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[201]"></a>TRACKING_get_sleep_statistics</STRONG> (Thumb, 204 bytes, Stack size 128 bytes, tracking.o(i.TRACKING_get_sleep_statistics))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_delta_clock_backward
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_activity
</UL>

<P><STRONG><a name="[206]"></a>TRACKING_get_whole_minute_delta</STRONG> (Thumb, 562 bytes, Stack size 80 bytes, tracking.o(i.TRACKING_get_whole_minute_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = TRACKING_get_whole_minute_delta &rArr; _get_activity_diff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_wake_up_by_force
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_charging_det_for_sleep
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_vital_minute
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_activity_diff
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[16b]"></a>TRACKING_initialization</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tracking.o(i.TRACKING_initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TRACKING_initialization &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_create
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[16d]"></a>TRACKING_total_data_load_file</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tracking.o(i.TRACKING_total_data_load_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = TRACKING_total_data_load_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_if_exists
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_day_stat_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[11]"></a>UARTE0_UART0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.UARTE0_UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UARTE0_UART0_IRQHandler &rArr; uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_startup_nrf52.o(RESET)
</UL>
<P><STRONG><a name="[1e5]"></a>UI_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ui.o(i.UI_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UI_init &rArr; SYSCLK_get_timer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[14f]"></a>UI_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ui.o(i.UI_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
</UL>

<P><STRONG><a name="[68]"></a>UI_oled_timer_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clingtask_ouptut.o(i.UI_oled_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UI_oled_timer_callback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled.o(i.OLED_state_machine)
</UL>
<P><STRONG><a name="[73]"></a>UI_rendering_timer_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, clingtask_ouptut.o(i.UI_rendering_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UI_rendering_timer_callback &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ui.o(i.UI_init)
</UL>
<P><STRONG><a name="[20e]"></a>UI_state_machine</STRONG> (Thumb, 682 bytes, Stack size 24 bytes, ui.o(i.UI_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = UI_state_machine &rArr; _frame_animating &rArr; _frame_panning &rArr; _display_frame_appear &rArr; _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorizing
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_off
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_frame_blinking
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_display_restart
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_animating
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_unauthorized_home
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_home
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_charging
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_authenticating
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
</UL>

<P><STRONG><a name="[150]"></a>UI_switch_state</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ui.o(i.UI_switch_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_rendering
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_animating
</UL>

<P><STRONG><a name="[218]"></a>UI_task_notify_get_balance</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.UI_task_notify_get_balance))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UI_task_notify_get_balance &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_icon
</UL>

<P><STRONG><a name="[196]"></a>UI_task_notify_oled</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.UI_task_notify_oled))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UI_task_notify_oled &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_off
</UL>

<P><STRONG><a name="[199]"></a>UI_task_notify_rendering</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.UI_task_notify_rendering))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UI_task_notify_rendering &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_button_click
</UL>

<P><STRONG><a name="[19c]"></a>UI_turn_on_display</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ui.o(i.UI_turn_on_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UI_turn_on_display &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_is_idle
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_set_state
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_idle
</UL>

<P><STRONG><a name="[1e3]"></a>USER_data_init</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, user.o(i.USER_data_init))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[219]"></a>USER_setup_device</STRONG> (Thumb, 276 bytes, Stack size 72 bytes, user.o(i.USER_setup_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USER_setup_device &rArr; _idle_time_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_voc_frequency_setup
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_sensitive_setup
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_skin_temp_interval_set
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_on_setup
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reminder_weekends_setup
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ppg_interval_set
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pedo_sensitivity_setup
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idle_time_setup
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gesture_UI_interval_set
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etha_sensitivity_setup
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
</UL>

<P><STRONG><a name="[224]"></a>USER_setup_profile</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, user.o(i.USER_setup_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USER_setup_profile &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[1e8]"></a>USER_store_device_param</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, user.o(i.USER_store_device_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USER_store_device_param
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
</UL>

<P><STRONG><a name="[225]"></a>WEATHER_set_weather</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, weather.o(i.WEATHER_set_weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = WEATHER_set_weather &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[168]"></a>_AsciiToHex</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, link.o(i._AsciiToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[165]"></a>_HexToAscii</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, link.o(i._HexToAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _HexToAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[229]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4da]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[ca]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_req
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_fsm_process
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEATHER_set_weather
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_profile
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_total
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_stat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_reboot
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_stop_notifying
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_streaming_authorized
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_Send_Packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_connect
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_initialization
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_idle
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_addr_validation
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_erase
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_statistics
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_activity
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_enter_low_power_mode
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_activity_diff
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_startup_logging
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_version
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_name
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_critical_info_restored
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_on_diconnect
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_id_str
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_sensitive_setup
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_screen_on_setup
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reminder_weekends_setup
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pedo_sensitivity_setup
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idle_time_setup
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRtc_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_init
</UL>

<P><STRONG><a name="[22b]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4db]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[162]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_local_clock
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_name
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_id_str
</UL>

<P><STRONG><a name="[c4]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_sqrt
</UL>

<P><STRONG><a name="[4dc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4dd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4de]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[22c]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[167]"></a>_cleark</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, link.o(i._cleark))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _cleark
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[163]"></a>_fill_up_random_characters</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, link.o(i._fill_up_random_characters))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _fill_up_random_characters &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
</UL>

<P><STRONG><a name="[238]"></a>_get_battery_perc</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, batt.o(i._get_battery_perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_battery_perc
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_system_powerdown
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_battery_adc_acquired
</UL>

<P><STRONG><a name="[1d0]"></a>_low_power_process_hw</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sensor.o(i._low_power_process_hw))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _low_power_process_hw &rArr; TRACKING_exit_low_power_mode &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_is_sleep_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
</UL>

<P><STRONG><a name="[164]"></a>_mapk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, link.o(i._mapk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _mapk &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_start_auth
</UL>

<P><STRONG><a name="[284]"></a>_radio_state_cleanup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, btle.o(i._radio_state_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _radio_state_cleanup &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose_force
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_disconnect
</UL>

<P><STRONG><a name="[285]"></a>_step_read_index</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fs_file.o(i._step_read_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = _step_read_index &rArr; FAT_GetNextChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextChain
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_flash_cache
</UL>

<P><STRONG><a name="[f6]"></a>_store_rx_msg</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cp.o(i._store_rx_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _store_rx_msg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ack_pkt_rcvr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_API_received_pkt
</UL>

<P><STRONG><a name="[169]"></a>_toupper</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, link.o(i._toupper))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
</UL>

<P><STRONG><a name="[269]"></a>_update_minute_base</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, tracking.o(i._update_minute_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _update_minute_base
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[184]"></a>_wait_for_operation_completed</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nflash_spi.o(i._wait_for_operation_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readStatusRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>

<P><STRONG><a name="[286]"></a>_write_ctrl_reg</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, cp.o(i._write_ctrl_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _write_ctrl_reg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rx_sp_msg_process
</UL>

<P><STRONG><a name="[297]"></a>addr_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.addr_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[29b]"></a>adv_data_encode</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ble_advdata.o(i.adv_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_power_level_encode
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_encode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_encode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_device_addr_encode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[2b0]"></a>ah</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, id_manager.o(i.ah))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ah
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
</UL>

<P><STRONG><a name="[2b1]"></a>app_error_fault_handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, app_error_weak.o(i.app_error_fault_handler))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_fault_handler
</UL>

<P><STRONG><a name="[1de]"></a>app_error_handler_bare</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, app_error.o(i.app_error_handler_bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_slow_conn_para
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fast_conn_para
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_name
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_mac_addr
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_id_str
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_advertising_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[2b2]"></a>app_timer_start</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, app_timer_freertos.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2b4]"></a>app_timer_stop</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, app_timer_freertos.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
</UL>

<P><STRONG><a name="[1c6]"></a>app_util_critical_region_enter</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, app_util_platform.o(i.app_util_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_shared_resource
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[1ca]"></a>app_util_critical_region_exit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, app_util_platform.o(i.app_util_critical_region_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_util_critical_region_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_shared_resource
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[2ca]"></a>ble_advdata_set</STRONG> (Thumb, 148 bytes, Stack size 96 bytes, ble_advdata.o(i.ble_advdata_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srdata_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advdata_check
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[237]"></a>ble_advertising_init</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_advertising_init
</UL>

<P><STRONG><a name="[2cd]"></a>ble_advertising_on_ble_evt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ble_advertising.o(i.ble_advertising_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = ble_advertising_on_ble_evt &rArr; on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2d1]"></a>ble_advertising_on_sys_evt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ble_advertising.o(i.ble_advertising_on_sys_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[2ac]"></a>ble_advertising_start</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, ble_advertising.o(i.ble_advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed_slow
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_directed
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnected
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
</UL>

<P><STRONG><a name="[2d7]"></a>ble_bas_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ble_bas.o(i.ble_bas_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_bas_init &rArr; battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[2d8]"></a>ble_bas_on_ble_evt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ble_bas.o(i.ble_bas_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_bas_on_ble_evt &rArr; on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2dc]"></a>ble_conn_params_on_ble_evt</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ble_conn_params.o(i.ble_conn_params_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ble_conn_params_on_ble_evt &rArr; on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2bb]"></a>ble_conn_state_conn_handles</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_conn_handles))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ble_conn_state_conn_handles &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[2e2]"></a>ble_conn_state_encrypted</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_encrypted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_encrypted &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[2e4]"></a>ble_conn_state_mitm_protected</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_mitm_protected))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_conn_state_mitm_protected &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[2e5]"></a>ble_conn_state_on_ble_evt</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_conn_state_on_ble_evt &rArr; record_purge_disconnected &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2c2]"></a>ble_conn_state_role</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_role))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_role &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2ea]"></a>ble_conn_state_user_flag_acquire</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>

<P><STRONG><a name="[2b9]"></a>ble_conn_state_user_flag_collection</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_collection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ble_conn_state_user_flag_collection
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[2bc]"></a>ble_conn_state_user_flag_get</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2c4]"></a>ble_conn_state_user_flag_set</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ble_conn_state.o(i.ble_conn_state_user_flag_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_flag_is_acquired
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2ed]"></a>ble_dis_init</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, ble_dis.o(i.ble_dis_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ble_dis_init &rArr; char_add &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_id_encode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[2f5]"></a>ble_hrs_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ble_hrs.o(i.ble_hrs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ble_hrs_init &rArr; heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;body_sensor_location_char_add
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[2f2]"></a>ble_hrs_on_ble_evt</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ble_hrs.o(i.ble_hrs_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_hrs_on_ble_evt &rArr; on_write &rArr; on_hrm_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_disconnect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[320]"></a>ble_on_event_process_reg</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ble_peripheral_task.o(i.ble_on_event_process_reg))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_init
</UL>

<P><STRONG><a name="[7f]"></a>ble_peripheral_task</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ble_peripheral_task.o(i.ble_peripheral_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ble_peripheral_task &rArr; btle_fsm_process &rArr; BTLE_state_machine_update &rArr; BTLE_streaming_authorized &rArr; BTLE_update_streaming_minute_entries &rArr; FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_init
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simulator_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_fsm_process
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clingtask.o(i.cling_init_task)
</UL>
<P><STRONG><a name="[302]"></a>ble_srv_ascii_to_utf8</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_ascii_to_utf8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_ascii_to_utf8
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;services_init
</UL>

<P><STRONG><a name="[303]"></a>ble_srv_is_notification_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ble_srv_common.o(i.ble_srv_is_notification_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hrm_cccd_write
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[2c9]"></a>ble_srv_report_ref_encode</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ble_srv_common.o(i.ble_srv_report_ref_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ble_srv_report_ref_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_level_char_add
</UL>

<P><STRONG><a name="[314]"></a>bsp_board_led_invert</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_invert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[30a]"></a>bsp_board_led_off</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
</UL>

<P><STRONG><a name="[30c]"></a>bsp_board_led_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
</UL>

<P><STRONG><a name="[313]"></a>bsp_board_led_state_get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, boards.o(i.bsp_board_led_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_board_led_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[30d]"></a>bsp_board_leds_off</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_off &rArr; bsp_board_led_off &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[30e]"></a>bsp_board_leds_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, boards.o(i.bsp_board_leds_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_board_leds_on &rArr; bsp_board_led_on &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>

<P><STRONG><a name="[310]"></a>bsp_board_pin_to_button_idx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, boards.o(i.bsp_board_pin_to_button_idx))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_button_event_handler
</UL>

<P><STRONG><a name="[2f3]"></a>bsp_btn_ble_on_ble_evt</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, bsp_btn_ble.o(i.bsp_btn_ble_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bsp_btn_ble_on_ble_evt &rArr; connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2ae]"></a>bsp_event_to_button_action_assign</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, bsp.o(i.bsp_event_to_button_action_assign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connection_buttons_configure
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_buttons_configure
</UL>

<P><STRONG><a name="[311]"></a>bsp_indication_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp.o(i.bsp_indication_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_indication
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>

<P><STRONG><a name="[301]"></a>btle_fsm_process</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, btle_api.o(i.btle_fsm_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = btle_fsm_process &rArr; BTLE_state_machine_update &rArr; BTLE_streaming_authorized &rArr; BTLE_update_streaming_minute_entries &rArr; FILE_get_next_file_with_prefix &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_state_machine_update
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[15e]"></a>btle_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, btle.o(i.btle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = btle_init
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_reg_write_callback
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_reg_disconn_callback
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_service_reg_conn_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_init
</UL>

<P><STRONG><a name="[401]"></a>chunk_queue_next</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_next))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
</UL>

<P><STRONG><a name="[86]"></a>cling_init_task</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, clingtask.o(i.cling_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = cling_init_task &rArr; SYSTEM_CLING_init &rArr; _critical_info_restored &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_nvmc_write_word
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_map_init
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_test
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_monitor_process
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[2ff]"></a>cling_service_init</STRONG> (Thumb, 442 bytes, Stack size 88 bytes, ble_cling.o(i.cling_service_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cling_service_init
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_on_event_process_reg
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[316]"></a>cling_service_reg_conn_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_cling.o(i.cling_service_reg_conn_callback))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[317]"></a>cling_service_reg_disconn_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_cling.o(i.cling_service_reg_disconn_callback))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[315]"></a>cling_service_reg_write_callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_cling.o(i.cling_service_reg_write_callback))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[7c]"></a>cling_task_input</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, clingtask_input.o(i.cling_task_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = cling_task_input &rArr; BATT_event_process &rArr; BATT_interrupt_process &rArr; BATT_write_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_key_long_pressed_detected
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOMEKEY_check_on_click_event
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clingtask.o(i.cling_init_task)
</UL>
<P><STRONG><a name="[7e]"></a>cling_task_output</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, clingtask_ouptut.o(i.cling_task_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = cling_task_output &rArr; UI_state_machine &rArr; _frame_animating &rArr; _frame_panning &rArr; _display_frame_appear &rArr; _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_state_machine
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_state_machine
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_state_machine
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clingtask.o(i.cling_init_task)
</UL>
<P><STRONG><a name="[da]"></a>cus_notify_send</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ble_cling.o(i.cus_notify_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = cus_notify_send &rArr; tx_send &rArr; tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_Send_Packet
</UL>

<P><STRONG><a name="[4ad]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[339]"></a>fds_file_delete</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, fds.o(i.fds_file_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[33d]"></a>fds_gc</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, fds.o(i.fds_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = fds_gc &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[33e]"></a>fds_init</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, fds.o(i.fds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[344]"></a>fds_record_close</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fds.o(i.fds_record_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_close &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[346]"></a>fds_record_find</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, fds.o(i.fds_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[348]"></a>fds_record_find_by_key</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[349]"></a>fds_record_find_in_file</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fds.o(i.fds_record_find_in_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fds_record_find_in_file &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[429]"></a>fds_record_id_from_desc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.fds_record_id_from_desc))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[34a]"></a>fds_record_open</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, fds.o(i.fds_record_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fds_record_open &rArr; record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[34b]"></a>fds_record_update</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, fds.o(i.fds_record_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_update &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[34d]"></a>fds_record_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fds.o(i.fds_record_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_write &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[34e]"></a>fds_record_write_reserved</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fds.o(i.fds_record_write_reserved))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[420]"></a>fds_register</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.fds_register))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[34f]"></a>fds_reserve</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, fds.o(i.fds_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>

<P><STRONG><a name="[351]"></a>fds_reserve_cancel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.fds_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[74]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, retarget.mod.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputc &rArr; SEGGER_RTT_Write &rArr; SEGGER_RTT_WriteNoLock &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtt_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[35b]"></a>fs_erase</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, fstorage.o(i.fs_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[341]"></a>fs_init</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fstorage.o(i.fs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fs_init
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_flash_page_end_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[359]"></a>fs_queued_op_count_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fstorage.o(i.fs_queued_op_count_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_access_in_progress
</UL>

<P><STRONG><a name="[361]"></a>fs_store</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, fstorage.o(i.fs_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_get_next_free
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_config
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
</UL>

<P><STRONG><a name="[362]"></a>fs_sys_event_handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fstorage.o(i.fs_sys_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fs_sys_event_handler &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_evt_dispatch
</UL>

<P><STRONG><a name="[376]"></a>gcm_ble_evt_handler</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = gcm_ble_evt_handler &rArr; update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cccd_written
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[2]"></a>gcm_gscm_evt_handler</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gatt_cache_manager.o(i.gcm_gscm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = gcm_gscm_evt_handler &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatts_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>gcm_im_evt_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = gcm_im_evt_handler &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[37f]"></a>gcm_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gcm_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[381]"></a>gcm_local_database_has_changed</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.gcm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
</UL>

<P><STRONG><a name="[9a]"></a>gcm_smd_evt_handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gatt_cache_manager.o(i.gcm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = gcm_smd_evt_handler &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[383]"></a>get_connection_by_conn_handle</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, id_manager.o(i.get_connection_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>

<P><STRONG><a name="[110]"></a>get_fattime</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, fs_fat.o(i.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_create_fs
</UL>

<P><STRONG><a name="[385]"></a>get_free_connection</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, id_manager.o(i.get_free_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_free_connection &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
</UL>

<P><STRONG><a name="[377]"></a>gscm_db_change_notification_done</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_db_change_notification_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[388]"></a>gscm_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gscm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[382]"></a>gscm_local_database_has_changed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gatts_cache_manager.o(i.gscm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = gscm_local_database_has_changed &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>

<P><STRONG><a name="[38c]"></a>gscm_local_db_cache_apply</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[38e]"></a>gscm_local_db_cache_update</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, gatts_cache_manager.o(i.gscm_local_db_cache_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
</UL>

<P><STRONG><a name="[98]"></a>gscm_pdb_evt_handler</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, gatts_cache_manager.o(i.gscm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = gscm_pdb_evt_handler &rArr; service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[37e]"></a>gscm_service_changed_ind_needed</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_needed))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = gscm_service_changed_ind_needed &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
</UL>

<P><STRONG><a name="[489]"></a>gscm_service_changed_ind_send</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.gscm_service_changed_ind_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gscm_service_changed_ind_send
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
</UL>

<P><STRONG><a name="[321]"></a>home_key_long_pressed_detected</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, homekey.o(i.home_key_long_pressed_detected))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_input
</UL>

<P><STRONG><a name="[397]"></a>im_address_resolve</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, id_manager.o(i.im_address_resolve))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = im_address_resolve &rArr; ah
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ah
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[398]"></a>im_ble_addr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, id_manager.o(i.im_ble_addr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_ble_addr_get &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>

<P><STRONG><a name="[399]"></a>im_ble_evt_handler</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, id_manager.o(i.im_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = im_ble_evt_handler &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_connection
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_address_resolve
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[37d]"></a>im_conn_handle_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, id_manager.o(i.im_conn_handle_get))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[39f]"></a>im_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, id_manager.o(i.im_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = im_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3a1]"></a>im_is_duplicate_bonding_data</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, id_manager.o(i.im_is_duplicate_bonding_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = im_is_duplicate_bonding_data &rArr; addr_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_irk
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_compare
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
</UL>

<P><STRONG><a name="[3a4]"></a>im_master_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.im_master_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[3a3]"></a>im_master_ids_compare</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, id_manager.o(i.im_master_ids_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = im_master_ids_compare &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[39d]"></a>im_new_peer_id</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, id_manager.o(i.im_new_peer_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = im_new_peer_id &rArr; peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>

<P><STRONG><a name="[95]"></a>im_pdb_evt_handler</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, id_manager.o(i.im_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = im_pdb_evt_handler &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[2c7]"></a>im_peer_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_set
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[2c3]"></a>im_peer_id_get_by_conn_handle</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, id_manager.o(i.im_peer_id_get_by_conn_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = im_peer_id_get_by_conn_handle &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[3a7]"></a>im_peer_id_get_by_master_id</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, id_manager.o(i.im_peer_id_get_by_master_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = im_peer_id_get_by_master_id &rArr; pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate_prepare
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
</UL>

<P><STRONG><a name="[1df]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, softdevice_handler.o(i.intern_softdevice_events_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_EGU2_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[3a2]"></a>is_valid_irk</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, id_manager.o(i.is_valid_irk))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_is_duplicate_bonding_data
</UL>

<P><STRONG><a name="[34]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[39c]"></a>new_connection</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, id_manager.o(i.new_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = new_connection &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_connection
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[3cc]"></a>next_id_get</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, peer_id.o(i.next_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>

<P><STRONG><a name="[d1]"></a>nofity_input_task_key_input_valid</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clingtask_input.o(i.nofity_input_task_key_input_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nofity_input_task_key_input_valid &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
</UL>

<P><STRONG><a name="[197]"></a>notify_ble_to_switch_adv_frequnce</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clingtask_ouptut.o(i.notify_ble_to_switch_adv_frequnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = notify_ble_to_switch_adv_frequnce &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_panel_on
</UL>

<P><STRONG><a name="[3ca]"></a>nrf_drv_clock_init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_is_enabled
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
</UL>

<P><STRONG><a name="[3d0]"></a>nrf_drv_clock_lfclk_request</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.nrf_drv_clock_lfclk_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_enqueue
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[3d2]"></a>nrf_drv_clock_on_sd_enable</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_sd_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[3a9]"></a>nrf_drv_clock_on_soc_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_drv_clock_on_soc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_clock_on_soc_event &rArr; clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[3ce]"></a>nrf_drv_common_irq_enable</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3d3]"></a>nrf_drv_common_per_res_acquire</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf_drv_common.o(i.nrf_drv_common_per_res_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acquire_shared_resource
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3f3]"></a>nrf_drv_common_per_res_release</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, nrf_drv_common.o(i.nrf_drv_common_per_res_release))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[81]"></a>nrf_drv_gpiote_callback</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, exti_hal.o(i.nrf_drv_gpiote_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_gpiote_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exti_hal.o(i.hw_exti_init)
</UL>
<P><STRONG><a name="[32d]"></a>nrf_drv_gpiote_in_event_disable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_all
</UL>

<P><STRONG><a name="[32f]"></a>nrf_drv_gpiote_in_event_enable</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_event_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_te
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_port
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_read
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_sense_set
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_get
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_handler_get
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_all
</UL>

<P><STRONG><a name="[396]"></a>nrf_drv_gpiote_in_init</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_in_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_by_gpiote
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_exti_init
</UL>

<P><STRONG><a name="[154]"></a>nrf_drv_gpiote_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_drv_gpiote_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_gpiote_init &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_in_use_clear
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_int_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_free
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalExti_init
</UL>

<P><STRONG><a name="[3dd]"></a>nrf_drv_saadc_buffer_convert</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_buffer_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_buffer_convert &rArr; nrf_saadc_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_buffer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e0]"></a>nrf_drv_saadc_channel_init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_channel_init &rArr; nrf_saadc_channel_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e3]"></a>nrf_drv_saadc_channel_uninit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_channel_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nrf_drv_saadc_channel_uninit &rArr; nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_channel_input_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e5]"></a>nrf_drv_saadc_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_saadc_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e4]"></a>nrf_drv_saadc_limits_set</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_limits_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_limit_int_get
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_enable
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
</UL>

<P><STRONG><a name="[3e7]"></a>nrf_drv_saadc_sample</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_drv_saadc_sample
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e8]"></a>nrf_drv_saadc_uninit</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, nrf_drv_saadc.o(i.nrf_drv_saadc_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nrf_drv_saadc_uninit &rArr; nrf_drv_saadc_channel_uninit &rArr; nrf_drv_saadc_limits_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_task_trigger
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_int_disable
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_saadc_event_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
</UL>

<P><STRONG><a name="[3e9]"></a>nrf_drv_spi_init</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, nrf_drv_spi.o(i.nrf_drv_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nrf_drv_spi_init &rArr; nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_per_res_acquire
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3ee]"></a>nrf_drv_spi_transfer</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, nrf_drv_spi.o(i.nrf_drv_spi_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nrf_drv_spi_transfer &rArr; nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
</UL>

<P><STRONG><a name="[3f0]"></a>nrf_drv_spi_uninit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_drv_spi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_spi_uninit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_per_res_release
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
</UL>

<P><STRONG><a name="[3ef]"></a>nrf_drv_spi_xfer</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, nrf_drv_spi.o(i.nrf_drv_spi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nrf_drv_spi_xfer &rArr; spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
</UL>

<P><STRONG><a name="[3f5]"></a>nrf_drv_twi_disable</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_drv_twi_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[4b7]"></a>nrf_drv_twi_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_twi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3f6]"></a>nrf_drv_twi_init</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.nrf_drv_twi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nrf_drv_twi_init &rArr; nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_per_res_acquire
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_irq_enable
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3f9]"></a>nrf_drv_twi_uninit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.nrf_drv_twi_uninit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nrf_drv_twi_uninit &rArr; nrf_drv_twi_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_per_res_release
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_get_IRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>

<P><STRONG><a name="[3fa]"></a>nrf_drv_twi_xfer</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, nrf_drv_twi.o(i.nrf_drv_twi_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nrf_drv_twi_xfer &rArr; twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
</UL>

<P><STRONG><a name="[31c]"></a>nrf_nvmc_write_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, nrf_nvmc.o(i.nrf_nvmc_write_word))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
</UL>

<P><STRONG><a name="[3e1]"></a>nrf_saadc_channel_init</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf_saadc.o(i.nrf_saadc_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[26e]"></a>oled_get_x_solution</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.oled_get_x_solution))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[26d]"></a>oled_get_y_solution</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(i.oled_get_y_solution))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[31d]"></a>oled_test</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, oled.o(i.oled_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = oled_test &rArr; OLED_init &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_hw_reset
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_full_scree_show
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
</UL>

<P><STRONG><a name="[408]"></a>pdb_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, peer_database.o(i.pdb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pdb_init &rArr; pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[40a]"></a>pdb_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_deleted_peer_id_get &rArr; pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[38a]"></a>pdb_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_database.o(i.pdb_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[93]"></a>pdb_pds_evt_handler</STRONG> (Thumb, 436 bytes, Stack size 40 bytes, peer_database.o(i.pdb_pds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pdb_pds_evt_handler &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(.constdata)
</UL>
<P><STRONG><a name="[3c5]"></a>pdb_peer_allocate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, peer_database.o(i.pdb_peer_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = pdb_peer_allocate &rArr; pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
</UL>

<P><STRONG><a name="[38d]"></a>pdb_peer_data_ptr_get</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_peer_data_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_needed
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[3a6]"></a>pdb_peer_free</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, peer_database.o(i.pdb_peer_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>

<P><STRONG><a name="[387]"></a>pdb_raw_store</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, peer_database.o(i.pdb_raw_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_set
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
</UL>

<P><STRONG><a name="[38f]"></a>pdb_write_buf_get</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, peer_database.o(i.pdb_write_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = pdb_write_buf_get &rArr; pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[390]"></a>pdb_write_buf_release</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, peer_database.o(i.pdb_write_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pdb_write_buf_release &rArr; write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[2c5]"></a>pdb_write_buf_store</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[3c4]"></a>pdb_write_buf_store_prepare</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, peer_database.o(i.pdb_write_buf_store_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pdb_write_buf_store_prepare &rArr; pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buf_length_words_set
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>

<P><STRONG><a name="[41f]"></a>pds_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_register
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[40b]"></a>pds_next_deleted_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_deleted_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_deleted_peer_id_get &rArr; peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
</UL>

<P><STRONG><a name="[40c]"></a>pds_next_peer_id_get</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_next_peer_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>

<P><STRONG><a name="[39b]"></a>pds_peer_data_iterate</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_iterate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pds_peer_data_iterate &rArr; fds_record_find_by_key &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[39a]"></a>pds_peer_data_iterate_prepare</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.pds_peer_data_iterate_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[411]"></a>pds_peer_data_read</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, peer_data_storage.o(i.pds_peer_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
</UL>

<P><STRONG><a name="[414]"></a>pds_peer_data_store</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, peer_data_storage.o(i.pds_peer_data_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_id_from_desc
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
</UL>

<P><STRONG><a name="[410]"></a>pds_peer_id_allocate</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pds_peer_id_allocate &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
</UL>

<P><STRONG><a name="[413]"></a>pds_peer_id_free</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
</UL>

<P><STRONG><a name="[415]"></a>pds_peer_id_is_allocated</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, peer_data_storage.o(i.pds_peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pds_peer_id_is_allocated &rArr; peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[41e]"></a>pds_space_reserve</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pds_space_reserve &rArr; fds_reserve &rArr; write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[41b]"></a>pds_space_reserve_cancel</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_space_reserve_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pds_space_reserve_cancel &rArr; fds_reserve_cancel
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
</UL>

<P><STRONG><a name="[42a]"></a>peer_id_allocate</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_allocate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[42b]"></a>peer_id_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, peer_id.o(i.peer_id_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = peer_id_delete &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[337]"></a>peer_id_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = peer_id_free &rArr; release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[423]"></a>peer_id_get_next_deleted</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_deleted &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_deleted_peer_id_get
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[424]"></a>peer_id_get_next_used</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_get_next_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_next_peer_id_get
</UL>

<P><STRONG><a name="[421]"></a>peer_id_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = peer_id_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[42c]"></a>peer_id_is_allocated</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_allocated))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_allocated &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_is_allocated
</UL>

<P><STRONG><a name="[42e]"></a>peer_id_is_deleted</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_id.o(i.peer_id_is_deleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_id_is_deleted &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_used
</UL>

<P><STRONG><a name="[294]"></a>pin_get_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pinmap.o(i.pin_get_status))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_validate_accel_int
</UL>

<P><STRONG><a name="[1e1]"></a>pin_map_init</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, pinmap.o(i.pin_map_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pin_map_init &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[148]"></a>pin_set_high</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pinmap.o(i.pin_set_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_set_high &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vibrator_set
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_on
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_data
</UL>

<P><STRONG><a name="[149]"></a>pin_set_low</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pinmap.o(i.pin_set_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pin_set_low &rArr; nrf_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_vibrator_set
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_power_off
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
</UL>

<P><STRONG><a name="[418]"></a>pm_buffer_block_acquire</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, pm_buffer.o(i.pm_buffer_block_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pm_buffer_block_acquire &rArr; pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[409]"></a>pm_buffer_init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, pm_buffer.o(i.pm_buffer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_buffer_init &rArr; pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[419]"></a>pm_buffer_ptr_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_ptr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_buffer_ptr_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[416]"></a>pm_buffer_release</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, pm_buffer.o(i.pm_buffer_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
</UL>

<P><STRONG><a name="[436]"></a>pm_conn_sec_config_reply</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, peer_manager.o(i.pm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = pm_conn_sec_config_reply &rArr; sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_conn_sec_config_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[1]"></a>pm_gcm_evt_handler</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, peer_manager.o(i.pm_gcm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_gcm_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gatt_cache_manager.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>pm_im_evt_handler</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, peer_manager.o(i.pm_im_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = pm_im_evt_handler &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> id_manager.o(.constdata)
</UL>
<P><STRONG><a name="[430]"></a>pm_init</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, peer_manager.o(i.pm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pm_init &rArr; pds_init &rArr; fds_init &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[438]"></a>pm_local_database_has_changed</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, peer_manager.o(i.pm_local_database_has_changed))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[42f]"></a>pm_mutex_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pm_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[31b]"></a>pm_mutex_lock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_block_acquire
</UL>

<P><STRONG><a name="[31a]"></a>pm_mutex_lock_first_available</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_mutex.o(i.pm_mutex_lock_first_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_by_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;claim
</UL>

<P><STRONG><a name="[3cd]"></a>pm_mutex_lock_status_get</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, pm_mutex.o(i.pm_mutex_lock_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pm_mutex_lock_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_deleted
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_id_get
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_ptr_get
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_is_allocated
</UL>

<P><STRONG><a name="[435]"></a>pm_mutex_unlock</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pm_mutex.o(i.pm_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
</UL>

<P><STRONG><a name="[2f1]"></a>pm_on_ble_evt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, peer_manager.o(i.pm_on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[94]"></a>pm_pdb_evt_handler</STRONG> (Thumb, 440 bytes, Stack size 56 bytes, peer_manager.o(i.pm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pm_pdb_evt_handler &rArr; pdb_next_peer_id_get &rArr; pds_next_peer_id_get &rArr; peer_id_get_next_used &rArr; next_id_get &rArr; pm_mutex_lock_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_deleted_peer_id_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[43a]"></a>pm_peer_delete</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, peer_manager.o(i.pm_peer_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
</UL>

<P><STRONG><a name="[431]"></a>pm_peers_delete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, peer_manager.o(i.pm_peers_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peer_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[433]"></a>pm_register</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, peer_manager.o(i.pm_register))
<BR><BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[432]"></a>pm_sec_params_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.pm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pm_sec_params_set &rArr; sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_manager_init
</UL>

<P><STRONG><a name="[9b]"></a>pm_sm_evt_handler</STRONG> (Thumb, 424 bytes, Stack size 48 bytes, peer_manager.o(i.pm_sm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = pm_sm_evt_handler &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_manager.o(.constdata)
</UL>
<P><STRONG><a name="[444]"></a>pvPortMalloc</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, heap_1.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[4c0]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4c4]"></a>pxPortInitialiseStack</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, port_cmsis.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[477]"></a>sdk_mapped_flags_bulk_update_by_key</STRONG> (Thumb, 118 bytes, Stack size 28 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_bulk_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
</UL>

<P><STRONG><a name="[471]"></a>sdk_mapped_flags_first_key_index_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_first_key_index_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[2e3]"></a>sdk_mapped_flags_get_by_key</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
</UL>

<P><STRONG><a name="[2e1]"></a>sdk_mapped_flags_key_list_get</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_key_list_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_index
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[2e8]"></a>sdk_mapped_flags_update_by_key</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_update_by_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_set_disconnected
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_activate
</UL>

<P><STRONG><a name="[487]"></a>sensorsim_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sensorsim.o(i.sensorsim_init))
<BR><BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_simulator_init
</UL>

<P><STRONG><a name="[43e]"></a>sm_ble_evt_handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_manager.o(i.sm_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
</UL>

<P><STRONG><a name="[437]"></a>sm_conn_sec_config_reply</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, security_manager.o(i.sm_conn_sec_config_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = sm_conn_sec_config_reply &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
</UL>

<P><STRONG><a name="[43b]"></a>sm_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, security_manager.o(i.sm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[96]"></a>sm_pdb_evt_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, security_manager.o(i.sm_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = sm_pdb_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[43f]"></a>sm_sec_params_set</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, security_manager.o(i.sm_sec_params_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_sec_params_set
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
</UL>

<P><STRONG><a name="[99]"></a>sm_smd_evt_handler</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, security_manager.o(i.sm_smd_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sm_smd_evt_handler &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> security_dispatcher.o(.constdata)
</UL>
<P><STRONG><a name="[48b]"></a>smd_ble_evt_handler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_ble_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = smd_ble_evt_handler &rArr; auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
</UL>

<P><STRONG><a name="[43c]"></a>smd_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, security_dispatcher.o(i.smd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smd_init &rArr; flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_id_init
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3be]"></a>smd_link_secure</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_peripheral
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[48e]"></a>smd_params_reply</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, security_dispatcher.o(i.smd_params_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_addr_get
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[97]"></a>smd_pdb_evt_handler</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, security_dispatcher.o(i.smd_pdb_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smd_pdb_evt_handler &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_conn_handle_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_database.o(.constdata)
</UL>
<P><STRONG><a name="[308]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_ble_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[307]"></a>softdevice_enable</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, softdevice_handler.o(i.softdevice_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = softdevice_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[306]"></a>softdevice_enable_get_default_config</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_enable_get_default_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_enable_get_default_config
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[8b]"></a>softdevice_fault_handler</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, softdevice_handler.o(i.softdevice_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_fault_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_fault_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(i.softdevice_handler_init)
</UL>
<P><STRONG><a name="[305]"></a>softdevice_handler_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, softdevice_handler.o(i.softdevice_handler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_sd_enable
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[3cf]"></a>softdevice_handler_is_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_handler_is_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_init
</UL>

<P><STRONG><a name="[309]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, softdevice_handler.o(i.softdevice_sys_evt_handler_set))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_stack_init
</UL>

<P><STRONG><a name="[8e]"></a>spi_master_0_event_handler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spidev_hal.o(i.spi_master_0_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_master_0_event_handler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.write_read)
</UL>
<P><STRONG><a name="[44e]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[453]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[468]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4a9]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[448]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[457]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[442]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[4b1]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[447]"></a>vPortEnterCritical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[44a]"></a>vPortExitCritical</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port_cmsis.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[445]"></a>vPortFree</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_1.o(i.vPortFree))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4aa]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortSetupTimerInterrupt &rArr; nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_task_trigger
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[455]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, port_cmsis_systick.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_enable
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_int_disable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_rtc_event_clear
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[449]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[461]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[c2]"></a>vTaskDelay</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
</UL>

<P><STRONG><a name="[31f]"></a>vTaskDelete</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskDelete &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
</UL>

<P><STRONG><a name="[467]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4b3]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4b0]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4b4]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[4c1]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[3cb]"></a>vTaskStartScheduler</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4af]"></a>vTaskStepTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[44c]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[a0]"></a>vTaskSwitchContext</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[4b6]"></a>xPortStartScheduler</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, port_cmsis.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt &rArr; nrf_drv_clock_lfclk_request &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[ee]"></a>xQueueCreateMutex</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_init
</UL>

<P><STRONG><a name="[ef]"></a>xQueueGenericCreate</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_init
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_init
</UL>

<P><STRONG><a name="[45f]"></a>xQueueGenericReceive</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_read
</UL>

<P><STRONG><a name="[4bf]"></a>xQueueGenericReset</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[4be]"></a>xQueueGenericSend</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[4c3]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[47c]"></a>xQueueGiveFromISR</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saadc_event_callback
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_master_0_event_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_handler
</UL>

<P><STRONG><a name="[2a7]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_freq_swicth_process
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>

<P><STRONG><a name="[2a5]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_freq_swicth_process
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[4c2]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[31e]"></a>xTaskGenericCreate</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[bd]"></a>xTaskGenericNotify</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;notify_ble_to_switch_adv_frequnce
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_rendering
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_oled
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_get_balance
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_rendering_timer_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_oled_timer_callback
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_task_reminder_notify
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_task_notific_notify
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_reminder_timer_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_notific_timer_callback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLING_task_rtc_notify
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nofity_input_task_key_input_valid
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_one_pkt_from_msg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rev_process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timeout_cb
</UL>

<P><STRONG><a name="[e2]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_init_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_one_pkt_from_msg
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_connect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_rev_process
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_state_machine_update
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[4c5]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[1be]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_GetFineTime
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_process
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[2b3]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
</UL>

<P><STRONG><a name="[1b8]"></a>xTaskIncrementTick</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1d4]"></a>xTaskNotifyFromISR</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tasks.o(i.xTaskNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskNotifyFromISR &rArr; ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_new_event_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SFE_exti_callback
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_on_connect
</UL>

<P><STRONG><a name="[300]"></a>xTaskNotifyWait</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, tasks.o(i.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_output
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_core_fsm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cling_task_input
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[452]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[466]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[44d]"></a>xTaskResumeAll</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[14c]"></a>xTimerCreate</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRtc_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_init
</UL>

<P><STRONG><a name="[4b5]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[be]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_rendering_timer_callback
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_oled_timer_callback
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_reminder_timer_callback
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_notific_timer_callback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_get_timer
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_timeout_cb
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start
</UL>

<P><STRONG><a name="[2ab]"></a>xTimerIsTimerActive</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timers.o(i.xTimerIsTimerActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTimerIsTimerActive &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[30b]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, boards.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
</UL>

<P><STRONG><a name="[90]"></a>bsp_button_event_handler</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, bsp.o(i.bsp_button_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsp_button_event_handler &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_pin_to_button_idx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bsp.o(.constdata)
</UL>
<P><STRONG><a name="[312]"></a>bsp_led_indication</STRONG> (Thumb, 780 bytes, Stack size 24 bytes, bsp.o(i.bsp_led_indication))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_on
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_leds_off
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_state_get
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_on
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_off
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_board_led_invert
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
</UL>

<P><STRONG><a name="[2ad]"></a>advertising_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.advertising_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = advertising_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[30f]"></a>connection_buttons_configure</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_btn_ble.o(i.connection_buttons_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = connection_buttons_configure &rArr; bsp_event_to_button_action_assign
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_event_to_button_action_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
</UL>

<P><STRONG><a name="[463]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[89]"></a>prvTaskExitError</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, port_cmsis.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port_cmsis.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4bc]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port_cmsis.o(i.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[481]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[1b7]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>nrf_rtc_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, port_cmsis_systick.o(i.nrf_rtc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_rtc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC1_IRQHandler
</UL>

<P><STRONG><a name="[4ae]"></a>nrf_rtc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[4ab]"></a>nrf_rtc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[4ac]"></a>nrf_rtc_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port_cmsis_systick.o(i.nrf_rtc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
</UL>

<P><STRONG><a name="[480]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, port_cmsis_systick.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[4a5]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
</UL>

<P><STRONG><a name="[450]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[451]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[45a]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[45b]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[465]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4a4]"></a>ulPortRaiseBASEPRI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(i.ulPortRaiseBASEPRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[4a7]"></a>__set_BASEPRI</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.__set_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortRaiseBASEPRI
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
</UL>

<P><STRONG><a name="[441]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[443]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[44b]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[44f]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvDeleteTCB
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[454]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[8c]"></a>prvIdleTask</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvIdleTask &rArr; vPortSuppressTicksAndSleep &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[456]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[458]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[4b2]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>

<P><STRONG><a name="[4a6]"></a>ulPortRaiseBASEPRI</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.ulPortRaiseBASEPRI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
</UL>

<P><STRONG><a name="[446]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[464]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[459]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[45c]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[45d]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[460]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[45e]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[462]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[8f]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[2cb]"></a>advdata_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advdata.o(i.advdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[29d]"></a>appearance_encode</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ble_advdata.o(i.appearance_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = appearance_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[29c]"></a>ble_device_addr_encode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ble_advdata.o(i.ble_device_addr_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ble_device_addr_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[323]"></a>conn_int_check</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ble_advdata.o(i.conn_int_check))
<BR><BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
</UL>

<P><STRONG><a name="[2a1]"></a>conn_int_encode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_advdata.o(i.conn_int_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = conn_int_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_check
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[29e]"></a>flags_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.flags_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = flags_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[2a2]"></a>manuf_specific_data_encode</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ble_advdata.o(i.manuf_specific_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = manuf_specific_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[2a4]"></a>name_encode</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, ble_advdata.o(i.name_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = name_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[2a3]"></a>service_data_encode</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, ble_advdata.o(i.service_data_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = service_data_encode &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[2cc]"></a>srdata_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advdata.o(i.srdata_check))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>

<P><STRONG><a name="[29f]"></a>tx_power_level_encode</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ble_advdata.o(i.tx_power_level_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tx_power_level_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[2b7]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_advdata.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_data_encode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manuf_specific_data_encode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_int_encode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;appearance_encode
</UL>

<P><STRONG><a name="[2a0]"></a>uuid_list_encode</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, ble_advdata.o(i.uuid_list_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_data_encode
</UL>

<P><STRONG><a name="[4a8]"></a>uuid_list_sized_encode</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, ble_advdata.o(i.uuid_list_sized_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uuid_list_sized_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_list_encode
</UL>

<P><STRONG><a name="[2a9]"></a>addr_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.addr_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_avail_get
</UL>

<P><STRONG><a name="[2a8]"></a>adv_mode_next_avail_get</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ble_advertising.o(i.adv_mode_next_avail_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adv_mode_next_avail_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[400]"></a>adv_mode_next_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ble_advertising.o(i.adv_mode_next_get))
<BR><BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_timeout
</UL>

<P><STRONG><a name="[2d2]"></a>flash_access_in_progress</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_advertising.o(i.flash_access_in_progress))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = flash_access_in_progress
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_queued_op_count_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2ce]"></a>on_connected</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ble_advertising.o(i.on_connected))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[2cf]"></a>on_disconnected</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_advertising.o(i.on_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = on_disconnected &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[2d0]"></a>on_timeout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_advertising.o(i.on_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = on_timeout &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_mode_next_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
</UL>

<P><STRONG><a name="[2d3]"></a>set_adv_mode_directed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2d4]"></a>set_adv_mode_directed_slow</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ble_advertising.o(i.set_adv_mode_directed_slow))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2d5]"></a>set_adv_mode_fast</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_fast))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_adv_mode_fast &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[2d6]"></a>set_adv_mode_slow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ble_advertising.o(i.set_adv_mode_slow))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;whitelist_has_entries
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advdata_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>

<P><STRONG><a name="[48a]"></a>whitelist_has_entries</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_advertising.o(i.whitelist_has_entries))
<BR><BR>[Called By]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_slow
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_mode_fast
</UL>

<P><STRONG><a name="[324]"></a>conn_params_negotiation</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ble_conn_params.o(i.conn_params_negotiation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_conn_params_ok
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_connect
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_conn_params_update
</UL>

<P><STRONG><a name="[325]"></a>is_conn_params_ok</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_conn_params.o(i.is_conn_params_ok))
<BR><BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>

<P><STRONG><a name="[2e0]"></a>on_conn_params_update</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_conn_params_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = on_conn_params_update &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2dd]"></a>on_connect</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ble_conn_params.o(i.on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = on_connect &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2de]"></a>on_disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = on_disconnect &rArr; app_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2df]"></a>on_write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ble_conn_params.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = on_write &rArr; conn_params_negotiation &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_params_negotiation
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
</UL>

<P><STRONG><a name="[2e7]"></a>record_activate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = record_activate &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[476]"></a>record_invalidate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ble_conn_state.o(i.record_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = record_invalidate &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_purge_disconnected
</UL>

<P><STRONG><a name="[2e6]"></a>record_purge_disconnected</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, ble_conn_state.o(i.record_purge_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = record_purge_disconnected &rArr; sdk_mapped_flags_key_list_get &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_invalidate
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[2e9]"></a>record_set_disconnected</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ble_conn_state.o(i.record_set_disconnected))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = record_set_disconnected &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_update_by_key
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
</UL>

<P><STRONG><a name="[2ec]"></a>user_flag_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[2eb]"></a>user_flag_is_acquired</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_conn_state.o(i.user_flag_is_acquired))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>

<P><STRONG><a name="[304]"></a>uint16_decode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_srv_common.o(i.uint16_decode))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>

<P><STRONG><a name="[2b8]"></a>apply_pending_flags_check</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.apply_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = apply_pending_flags_check &rArr; local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[379]"></a>cccd_written</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.cccd_written))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[378]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatt_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
</UL>

<P><STRONG><a name="[380]"></a>internal_state_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_init
</UL>

<P><STRONG><a name="[2bd]"></a>local_db_apply_in_evt</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_apply_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = local_db_apply_in_evt &rArr; gscm_local_db_cache_apply &rArr; pdb_peer_data_ptr_get &rArr; pds_peer_data_read &rArr; peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_apply
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_im_evt_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>

<P><STRONG><a name="[37a]"></a>local_db_update_in_evt</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, gatt_cache_manager.o(i.local_db_update_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_db_cache_update
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_smd_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
</UL>

<P><STRONG><a name="[2ba]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gatt_cache_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_pending_flags_check
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_pending_flags_check
</UL>

<P><STRONG><a name="[37c]"></a>service_changed_pending_flags_check</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.service_changed_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_send_in_evt
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_local_database_has_changed
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_gscm_evt_handler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[488]"></a>service_changed_send_in_evt</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, gatt_cache_manager.o(i.service_changed_send_in_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_service_changed_ind_send
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_db_change_notification_done
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_apply_in_evt
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;service_changed_pending_flags_check
</UL>

<P><STRONG><a name="[37b]"></a>update_pending_flags_check</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, gatt_cache_manager.o(i.update_pending_flags_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = update_pending_flags_check &rArr; local_db_update_in_evt &rArr; gscm_local_db_cache_update &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_db_update_in_evt
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcm_ble_evt_handler
</UL>

<P><STRONG><a name="[391]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
</UL>

<P><STRONG><a name="[389]"></a>internal_state_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gatts_cache_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_init
</UL>

<P><STRONG><a name="[38b]"></a>service_changed_pending_set</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gatts_cache_manager.o(i.service_changed_pending_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = service_changed_pending_set &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_raw_store
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_next_peer_id_get
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_pdb_evt_handler
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gscm_local_database_has_changed
</UL>

<P><STRONG><a name="[39e]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, id_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_pdb_evt_handler
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_ble_evt_handler
</UL>

<P><STRONG><a name="[3a0]"></a>internal_state_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, id_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_init
</UL>

<P><STRONG><a name="[3a5]"></a>peer_id_set</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, id_manager.o(i.peer_id_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = peer_id_set &rArr; get_connection_by_conn_handle &rArr; ble_conn_state_user_flag_get &rArr; sdk_mapped_flags_get_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_by_conn_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
</UL>

<P><STRONG><a name="[87]"></a>fds_evt_handler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, peer_data_storage.o(i.fds_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = fds_evt_handler &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_within_pm_range
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_key_to_peer_data_id
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_within_pm_range
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> peer_data_storage.o(i.pds_init)
</UL>
<P><STRONG><a name="[334]"></a>file_id_to_peer_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_to_peer_id))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
</UL>

<P><STRONG><a name="[332]"></a>file_id_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.file_id_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[336]"></a>pds_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_data_storage.o(i.pds_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[338]"></a>peer_data_delete</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, peer_data_storage.o(i.peer_data_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_get_next_deleted
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_id_free
</UL>

<P><STRONG><a name="[427]"></a>peer_data_find</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_data_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = peer_data_find &rArr; fds_record_find &rArr; record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_to_file_id
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
</UL>

<P><STRONG><a name="[426]"></a>peer_data_id_is_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_read
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_space_reserve
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[425]"></a>peer_data_id_to_record_key</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_data_id_to_record_key))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_iterate
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_ids_load
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
</UL>

<P><STRONG><a name="[428]"></a>peer_id_to_file_id</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, peer_data_storage.o(i.peer_id_to_file_id))
<BR><BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_peer_data_store
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_find
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_delete
</UL>

<P><STRONG><a name="[422]"></a>peer_ids_load</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, peer_data_storage.o(i.peer_ids_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = peer_ids_load &rArr; peer_id_allocate &rArr; claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_id_to_record_key
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_id_to_peer_id
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pds_init
</UL>

<P><STRONG><a name="[335]"></a>record_key_to_peer_data_id</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_to_peer_data_id))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[333]"></a>record_key_within_pm_range</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, peer_data_storage.o(i.record_key_within_pm_range))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_evt_handler
</UL>

<P><STRONG><a name="[3aa]"></a>internal_state_reset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peer_database.o(i.internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_init
</UL>

<P><STRONG><a name="[40f]"></a>pdb_evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.pdb_evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pdb_evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[41c]"></a>peer_data_const_point_to_buffer</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, peer_database.o(i.peer_data_const_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = peer_data_const_point_to_buffer &rArr; peer_data_point_to_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[41a]"></a>peer_data_point_to_buffer</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, peer_database.o(i.peer_data_point_to_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = peer_data_point_to_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_data_const_point_to_buffer
</UL>

<P><STRONG><a name="[41d]"></a>write_buf_length_words_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, peer_database.o(i.write_buf_length_words_set))
<BR><BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
</UL>

<P><STRONG><a name="[40d]"></a>write_buffer_record_find</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, peer_database.o(i.write_buffer_record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[412]"></a>write_buffer_record_find_next</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_buffer_record_find_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_free
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>

<P><STRONG><a name="[4b8]"></a>write_buffer_record_find_unused</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_database.o(i.write_buffer_record_find_unused))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_get
</UL>

<P><STRONG><a name="[417]"></a>write_buffer_record_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_buffer_record_get &rArr; write_buffer_record_find_unused &rArr; write_buffer_record_find &rArr; write_buffer_record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_find_unused
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
</UL>

<P><STRONG><a name="[3ab]"></a>write_buffer_record_invalidate</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, peer_database.o(i.write_buffer_record_invalidate))
<BR><BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_release
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_state_reset
</UL>

<P><STRONG><a name="[40e]"></a>write_buffer_record_release</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peer_database.o(i.write_buffer_record_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = write_buffer_record_release &rArr; pm_buffer_release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_buffer_release
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_buffer_record_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_pds_evt_handler
</UL>

<P><STRONG><a name="[319]"></a>claim</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, peer_id.o(i.claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = claim &rArr; pm_mutex_lock_first_available &rArr; lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_delete
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_allocate
</UL>

<P><STRONG><a name="[3ac]"></a>internal_state_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, peer_id.o(i.internal_state_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = internal_state_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_init
</UL>

<P><STRONG><a name="[42d]"></a>release</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, peer_id.o(i.release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = release &rArr; pm_mutex_unlock &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peer_id_free
</UL>

<P><STRONG><a name="[439]"></a>evt_send</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, peer_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_im_evt_handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_gcm_evt_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sm_evt_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_pdb_evt_handler
</UL>

<P><STRONG><a name="[43d]"></a>internal_state_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, peer_manager.o(i.internal_state_reset))
<BR><BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>

<P><STRONG><a name="[3c9]"></a>lock_by_mask</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, pm_mutex.o(i.lock_by_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lock_by_mask &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock_first_available
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_mutex_lock
</UL>

<P><STRONG><a name="[2be]"></a>auth_status_failure_process</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_failure_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = auth_status_failure_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[2c0]"></a>auth_status_process</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, security_dispatcher.o(i.auth_status_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = auth_status_process &rArr; auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[2c1]"></a>auth_status_success_process</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, security_dispatcher.o(i.auth_status_success_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = auth_status_success_process &rArr; pdb_write_buf_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_process
</UL>

<P><STRONG><a name="[326]"></a>conn_sec_update_process</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, security_dispatcher.o(i.conn_sec_update_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = conn_sec_update_process &rArr; encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_mitm_protected
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_encrypted
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[32e]"></a>disconnect_process</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, security_dispatcher.o(i.disconnect_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = disconnect_process &rArr; link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[327]"></a>encryption_failure</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, security_dispatcher.o(i.encryption_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = encryption_failure &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
</UL>

<P><STRONG><a name="[2c6]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_dispatcher.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_pdb_evt_handler
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_request_process
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_params_request_process
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conn_sec_update_process
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_success_process
</UL>

<P><STRONG><a name="[356]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_dispatcher.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_init
</UL>

<P><STRONG><a name="[3bf]"></a>link_secure_central</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, security_dispatcher.o(i.link_secure_central))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[3c0]"></a>link_secure_central_existing_peer</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, security_dispatcher.o(i.link_secure_central_existing_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_id_is_valid
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[3c1]"></a>link_secure_central_new_peer</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, security_dispatcher.o(i.link_secure_central_new_peer))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure_central_new_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_get
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_store_prepare
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_allocate
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[2bf]"></a>link_secure_failure</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, security_dispatcher.o(i.link_secure_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = link_secure_failure &rArr; pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pairing_failure
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encryption_failure
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect_process
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auth_status_failure_process
</UL>

<P><STRONG><a name="[48d]"></a>link_secure_peripheral</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, security_dispatcher.o(i.link_secure_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = link_secure_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>

<P><STRONG><a name="[3c6]"></a>pairing_failure</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, security_dispatcher.o(i.pairing_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = pairing_failure &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_write_buf_release
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_failure
</UL>

<P><STRONG><a name="[483]"></a>sec_info_request_process</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, security_dispatcher.o(i.sec_info_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sec_info_request_process &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_master_id
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_master_ids_compare
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pdb_peer_data_ptr_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_start_send
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_proc_start
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[484]"></a>sec_params_request_process</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_params_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_params_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[3c2]"></a>sec_proc_start</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, security_dispatcher.o(i.sec_proc_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_free
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_new_peer_id
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_new_peer
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central_existing_peer
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[485]"></a>sec_request_process</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_request_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_request_process &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_ble_evt_handler
</UL>

<P><STRONG><a name="[3c3]"></a>sec_start_send</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, security_dispatcher.o(i.sec_start_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sec_start_send &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sec_info_request_process
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_central
</UL>

<P><STRONG><a name="[330]"></a>events_send_from_err_code</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, security_manager.o(i.events_send_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = events_send_from_err_code &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[331]"></a>evt_send</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, security_manager.o(i.evt_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[357]"></a>flag_id_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, security_manager.o(i.flag_id_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flag_id_init &rArr; ble_conn_state_user_flag_acquire
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_init
</UL>

<P><STRONG><a name="[358]"></a>flags_set_from_err_code</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, security_manager.o(i.flags_set_from_err_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flags_set_from_err_code &rArr; ble_conn_state_user_flag_set &rArr; sdk_mapped_flags_update_by_key &rArr; sdk_mapped_flags_bulk_update_by_key
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>

<P><STRONG><a name="[3bd]"></a>link_secure</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, security_manager.o(i.link_secure))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[3c7]"></a>link_secure_pending_process</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, security_manager.o(i.link_secure_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_ble_evt_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[406]"></a>params_reply_pending_process</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, security_manager.o(i.params_reply_pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = params_reply_pending_process &rArr; smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_collection
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_conn_handles
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_any_set
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_pdb_evt_handler
</UL>

<P><STRONG><a name="[3c8]"></a>sdk_mapped_flags_any_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, security_manager.o(i.sdk_mapped_flags_any_set))
<BR><BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_secure_pending_process
</UL>

<P><STRONG><a name="[48c]"></a>sec_params_verify</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, security_manager.o(i.sec_params_verify))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_sec_params_set
</UL>

<P><STRONG><a name="[486]"></a>send_config_req</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, security_manager.o(i.send_config_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = send_config_req &rArr; evt_send
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;evt_send
</UL>
<BR>[Called By]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply_perform
</UL>

<P><STRONG><a name="[407]"></a>smd_params_reply_perform</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, security_manager.o(i.smd_params_reply_perform))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = smd_params_reply_perform &rArr; smd_params_reply &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;im_peer_id_get_by_conn_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_user_flag_get
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_role
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_config_req
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flags_set_from_err_code
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_send_from_err_code
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smd_params_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;params_reply_pending_process
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_smd_evt_handler
</UL>

<P><STRONG><a name="[2c8]"></a>battery_level_char_add</STRONG> (Thumb, 468 bytes, Stack size 88 bytes, ble_bas.o(i.battery_level_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = battery_level_char_add &rArr; ble_srv_report_ref_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_report_ref_encode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
</UL>

<P><STRONG><a name="[2d9]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_bas.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[2da]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_bas.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[2db]"></a>on_write</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ble_bas.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
</UL>

<P><STRONG><a name="[2ee]"></a>char_add</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, ble_dis.o(i.char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = char_add &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[2f0]"></a>pnp_id_encode</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, ble_dis.o(i.pnp_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pnp_id_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[2ef]"></a>sys_id_encode</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_dis.o(i.sys_id_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_id_encode &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
</UL>

<P><STRONG><a name="[440]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_dis.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pnp_id_encode
</UL>

<P><STRONG><a name="[2f7]"></a>body_sensor_location_char_add</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, ble_hrs.o(i.body_sensor_location_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = body_sensor_location_char_add
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[2f6]"></a>heart_rate_measurement_char_add</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, ble_hrs.o(i.heart_rate_measurement_char_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
</UL>

<P><STRONG><a name="[393]"></a>hrm_encode</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ble_hrs.o(i.hrm_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint16_encode
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heart_rate_measurement_char_add
</UL>

<P><STRONG><a name="[2f8]"></a>on_connect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_hrs.o(i.on_connect))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
</UL>

<P><STRONG><a name="[2f9]"></a>on_disconnect</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ble_hrs.o(i.on_disconnect))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
</UL>

<P><STRONG><a name="[3fd]"></a>on_hrm_cccd_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ble_hrs.o(i.on_hrm_cccd_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = on_hrm_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_is_notification_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[2fa]"></a>on_write</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ble_hrs.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_write &rArr; on_hrm_cccd_write &rArr; ble_srv_is_notification_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_hrm_cccd_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
</UL>

<P><STRONG><a name="[394]"></a>uint16_encode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ble_hrs.o(i.uint16_encode))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hrm_encode
</UL>

<P><STRONG><a name="[80]"></a>_on_ble_evt</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ble_cling.o(i._on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _on_ble_evt &rArr; on_write &rArr; handle_write_req &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hanlde_disconnected_evt_t
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_conection_req
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_cling.o(i.cling_service_init)
</UL>
<P><STRONG><a name="[275]"></a>handle_conection_req</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ble_cling.o(i.handle_conection_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = handle_conection_req
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_ble_evt
</UL>

<P><STRONG><a name="[392]"></a>handle_write_req</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, ble_cling.o(i.handle_write_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = handle_write_req &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_write
</UL>

<P><STRONG><a name="[276]"></a>hanlde_disconnected_evt_t</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ble_cling.o(i.hanlde_disconnected_evt_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hanlde_disconnected_evt_t
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_ble_evt
</UL>

<P><STRONG><a name="[277]"></a>on_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ble_cling.o(i.on_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = on_write &rArr; handle_write_req &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_write_req
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_ble_evt
</UL>

<P><STRONG><a name="[274]"></a>tx_buffer_process</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, ble_cling.o(i.tx_buffer_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_on_ble_evt
</UL>

<P><STRONG><a name="[328]"></a>tx_send</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ble_cling.o(i.tx_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tx_send &rArr; tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_buffer_process
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cus_notify_send
</UL>

<P><STRONG><a name="[1ae]"></a>clock_clk_started_notify</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nrf_drv_clock.o(i.clock_clk_started_notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clock_clk_started_notify
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_dequeue
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_on_soc_event
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[322]"></a>item_dequeue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_dequeue))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_clk_started_notify
</UL>

<P><STRONG><a name="[3d1]"></a>item_enqueue</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.item_enqueue))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[3ba]"></a>lfclk_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.lfclk_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lfclk_start &rArr; nrf_clock_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_task_trigger
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_int_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_clock_lfclk_request
</UL>

<P><STRONG><a name="[1ab]"></a>nrf_clock_event_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[1ac]"></a>nrf_clock_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_clock.o(i.nrf_clock_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_clock_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>nrf_clock_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POWER_CLOCK_IRQHandler
</UL>

<P><STRONG><a name="[3bb]"></a>nrf_clock_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
</UL>

<P><STRONG><a name="[3bc]"></a>nrf_clock_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_clock.o(i.nrf_clock_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfclk_start
</UL>

<P><STRONG><a name="[296]"></a>acquire_shared_resource</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf_drv_common.o(i.acquire_shared_resource))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_common_per_res_acquire
</UL>

<P><STRONG><a name="[3dc]"></a>channel_free</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_free))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[143]"></a>channel_handler_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_handler_get))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3d9]"></a>channel_port_alloc</STRONG> (Thumb, 122 bytes, Stack size 36 bytes, nrf_drv_gpiote.o(i.channel_port_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = channel_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[145]"></a>channel_port_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.channel_port_get))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>nrf_bitmask_bit_is_set</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, nrf_drv_gpiote.o(i.nrf_bitmask_bit_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nrf_bitmask_bit_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3da]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[146]"></a>nrf_gpio_cfg_sense_set</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpio_cfg_sense_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_cfg_sense_set
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3d6]"></a>nrf_gpio_pin_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpio_pin_read))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[142]"></a>nrf_gpio_ports_read</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpio_ports_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpio_ports_read
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3fc]"></a>nrf_gpiote_event_addr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_addr_get))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_is_set
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_clear
</UL>

<P><STRONG><a name="[141]"></a>nrf_gpiote_event_clear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[140]"></a>nrf_gpiote_event_is_set</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_event_is_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpiote_event_is_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpiote_event_addr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOTE_IRQHandler
</UL>

<P><STRONG><a name="[3d7]"></a>nrf_gpiote_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.nrf_gpiote_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>

<P><STRONG><a name="[3d8]"></a>pin_in_use_by_gpiote</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_gpiote))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>

<P><STRONG><a name="[3d4]"></a>pin_in_use_by_port</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_port))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[3d5]"></a>pin_in_use_by_te</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_by_te))
<BR><BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>

<P><STRONG><a name="[3db]"></a>pin_in_use_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_gpiote.o(i.pin_in_use_clear))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
</UL>

<P><STRONG><a name="[49d]"></a>nrf_uart_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[49a]"></a>nrf_uart_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[47b]"></a>nrf_uart_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uart_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
</UL>

<P><STRONG><a name="[49b]"></a>nrf_uart_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[499]"></a>nrf_uart_int_enable_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_int_enable_check))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[49c]"></a>nrf_uart_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uart_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[4a2]"></a>nrf_uarte_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4a0]"></a>nrf_uarte_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4a1]"></a>nrf_uarte_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_uart.o(i.nrf_uarte_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_uarte_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[4a3]"></a>nrf_uarte_rx_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_uart.o(i.nrf_uarte_rx_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
</UL>

<P><STRONG><a name="[47a]"></a>rx_byte</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.rx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[49e]"></a>rx_done_event</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.rx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[498]"></a>tx_byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf_drv_uart.o(i.tx_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tx_byte &rArr; nrf_uart_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[49f]"></a>tx_done_event</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, nrf_drv_uart.o(i.tx_done_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tx_done_event
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uarte_irq_handler
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_irq_handler
</UL>

<P><STRONG><a name="[20d]"></a>uart_irq_handler</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uart_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uart_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_byte
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_byte
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_task_trigger
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_enable_check
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_int_disable
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_clear
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_event_check
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uart_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[20c]"></a>uarte_irq_handler</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, nrf_drv_uart.o(i.uarte_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = uarte_irq_handler &rArr; tx_done_event
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_done_event
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_done_event
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_rx_amount_get
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_clear
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_event_check
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_uarte_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTE0_UART0_IRQHandler
</UL>

<P><STRONG><a name="[354]"></a>finish_transfer</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.finish_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finish_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[9c]"></a>irq_handler_for_instance_0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.irq_handler_for_instance_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irq_handler_for_instance_0 &rArr; irq_handler_spim &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_spi.o(.constdata)
</UL>
<P><STRONG><a name="[3ad]"></a>irq_handler_spim</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.irq_handler_spim))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = irq_handler_spim &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_for_instance_0
</UL>

<P><STRONG><a name="[490]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
</UL>

<P><STRONG><a name="[3ec]"></a>nrf_gpio_cfg</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg_output
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3eb]"></a>nrf_gpio_cfg_output</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf_drv_spi.o(i.nrf_gpio_cfg_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nrf_gpio_cfg_output &rArr; nrf_gpio_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3ea]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[355]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finish_transfer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3af]"></a>nrf_spim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[3b0]"></a>nrf_spim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_spi.o(i.nrf_spim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_spim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_spim
</UL>

<P><STRONG><a name="[3f1]"></a>nrf_spim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[3ed]"></a>nrf_spim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>

<P><STRONG><a name="[3f2]"></a>nrf_spim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_spi.o(i.nrf_spim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spim_xfer
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
</UL>

<P><STRONG><a name="[3f4]"></a>spim_xfer</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, nrf_drv_spi.o(i.spim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spim_xfer &rArr; nrf_spim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_task_trigger
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_enable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_int_disable
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_clear
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_spim_event_check
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_xfer
</UL>

<P><STRONG><a name="[9d]"></a>irq_handler_for_instance_1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.irq_handler_for_instance_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = irq_handler_for_instance_1 &rArr; irq_handler_twim &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf_drv_twi.o(.constdata)
</UL>
<P><STRONG><a name="[3ae]"></a>irq_handler_twim</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, nrf_drv_twi.o(i.irq_handler_twim))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = irq_handler_twim &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_txd_amount_get
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rxd_amount_get
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_for_instance_1
</UL>

<P><STRONG><a name="[492]"></a>nrf_delay_us</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[3f8]"></a>nrf_drv_get_IRQn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_get_IRQn))
<BR><BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[494]"></a>nrf_drv_is_in_RAM</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_drv_is_in_RAM))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[493]"></a>nrf_gpio_pin_clear</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[491]"></a>nrf_gpio_pin_set</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_gpio_pin_set))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_clear_bus
</UL>

<P><STRONG><a name="[3b9]"></a>nrf_twim_errorsrc_get_and_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_errorsrc_get_and_clear))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b1]"></a>nrf_twim_event_check</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b2]"></a>nrf_twim_event_clear</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf_drv_twi.o(i.nrf_twim_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_twim_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b3]"></a>nrf_twim_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b4]"></a>nrf_twim_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[496]"></a>nrf_twim_rx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_rx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[3b6]"></a>nrf_twim_rxd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_rxd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b8]"></a>nrf_twim_shorts_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_shorts_set))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3b5]"></a>nrf_twim_task_trigger</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[495]"></a>nrf_twim_tx_buffer_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_tx_buffer_set))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[3b7]"></a>nrf_twim_txd_amount_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.nrf_twim_txd_amount_get))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_handler_twim
</UL>

<P><STRONG><a name="[3f7]"></a>twi_clear_bus</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, nrf_drv_twi.o(i.twi_clear_bus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = twi_clear_bus
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_set
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_gpio_pin_clear
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
</UL>

<P><STRONG><a name="[497]"></a>twi_process_error</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, nrf_drv_twi.o(i.twi_process_error))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twim_xfer
</UL>

<P><STRONG><a name="[3fb]"></a>twim_xfer</STRONG> (Thumb, 672 bytes, Stack size 40 bytes, nrf_drv_twi.o(i.twim_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = twim_xfer &rArr; nrf_twim_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;twi_process_error
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_tx_buffer_set
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_task_trigger
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_shorts_set
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_rx_buffer_set
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_enable
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_int_disable
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_clear
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_event_check
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_twim_errorsrc_get_and_clear
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_is_in_RAM
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
</UL>

<P><STRONG><a name="[1c2]"></a>nrf_saadc_buffer_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_buffer_init))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[3e2]"></a>nrf_saadc_channel_input_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_channel_input_set))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
</UL>

<P><STRONG><a name="[1bf]"></a>nrf_saadc_event_check</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_check))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>nrf_saadc_event_clear</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf_drv_saadc.o(i.nrf_saadc_event_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_saadc_event_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[3de]"></a>nrf_saadc_int_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[3df]"></a>nrf_saadc_int_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>

<P><STRONG><a name="[3e6]"></a>nrf_saadc_limit_int_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_limit_int_get))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_limits_set
</UL>

<P><STRONG><a name="[1c1]"></a>nrf_saadc_task_trigger</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf_drv_saadc.o(i.nrf_saadc_task_trigger))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAADC_IRQHandler
</UL>

<P><STRONG><a name="[2b6]"></a>__sd_nvic_irq_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_util_platform.o(i.__sd_nvic_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_exit
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_critical_region_enter
</UL>

<P><STRONG><a name="[2b5]"></a>sd_nvic_critical_region_enter</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, app_util_platform.o(i.sd_nvic_critical_region_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_util_critical_region_enter
</UL>

<P><STRONG><a name="[299]"></a>address_is_valid</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fds.o(i.address_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = address_is_valid
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[318]"></a>chunk_is_aligned</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.chunk_is_aligned))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = chunk_is_aligned
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_word_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[479]"></a>chunk_queue_get_and_advance</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_get_and_advance))
<BR><BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
</UL>

<P><STRONG><a name="[46b]"></a>chunk_queue_skip</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fds.o(i.chunk_queue_skip))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[32a]"></a>delete_execute</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, fds.o(i.delete_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = delete_execute &rArr; record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[46c]"></a>event_prepare</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, fds.o(i.event_prepare))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[33f]"></a>event_send</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fds.o(i.event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[32c]"></a>file_find_and_delete</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, fds.o(i.file_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = file_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[343]"></a>flag_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[33a]"></a>flag_is_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.flag_is_set))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[340]"></a>flag_set</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fds.o(i.flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
</UL>

<P><STRONG><a name="[4]"></a>fs_event_handler</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, fds.o(i.fs_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fs_event_handler &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fds.o(fs_data)
</UL>
<P><STRONG><a name="[366]"></a>gc_execute</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fds.o(i.gc_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = gc_execute &rArr; gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[371]"></a>gc_init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, fds.o(i.gc_init))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[368]"></a>gc_next_page</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fds.o(i.gc_next_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = gc_next_page &rArr; gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36b]"></a>gc_page_erase</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fds.o(i.gc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_page_erase &rArr; gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36e]"></a>gc_page_next</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fds.o(i.gc_page_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_page_next
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
</UL>

<P><STRONG><a name="[36a]"></a>gc_record_copy</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.gc_record_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[369]"></a>gc_record_find_next</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, fds.o(i.gc_record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = gc_record_find_next &rArr; gc_record_copy &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_copy
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_next_page
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[367]"></a>gc_state_advance</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fds.o(i.gc_state_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gc_state_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_update_swap_offset
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_pages
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36f]"></a>gc_swap_erase</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fds.o(i.gc_swap_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = gc_swap_erase &rArr; fs_erase &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_page_erase
</UL>

<P><STRONG><a name="[373]"></a>gc_swap_pages</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, fds.o(i.gc_swap_pages))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[36c]"></a>gc_swap_promote</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.gc_swap_promote))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = gc_swap_promote &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[36d]"></a>gc_tag_new_swap</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fds.o(i.gc_tag_new_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = gc_tag_new_swap &rArr; page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
</UL>

<P><STRONG><a name="[372]"></a>gc_update_swap_offset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.gc_update_swap_offset))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_state_advance
</UL>

<P><STRONG><a name="[403]"></a>header_is_valid</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fds.o(i.header_is_valid))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
</UL>

<P><STRONG><a name="[3a8]"></a>init_execute</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, fds.o(i.init_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_execute &rArr; page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_swap
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_tag_write_data
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[29a]"></a>is_word_aligned</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.is_word_aligned))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>

<P><STRONG><a name="[33b]"></a>op_enqueue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, fds.o(i.op_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = op_enqueue &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_next
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[472]"></a>page_from_record</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, fds.o(i.page_from_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = page_from_record
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>

<P><STRONG><a name="[4bb]"></a>page_has_space</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fds.o(i.page_has_space))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
</UL>

<P><STRONG><a name="[404]"></a>page_identify</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fds.o(i.page_identify))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[405]"></a>page_is_erased</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, fds.o(i.page_is_erased))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[4ba]"></a>page_offsets_update</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fds.o(i.page_offsets_update))
<BR><BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[402]"></a>page_scan</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, fds.o(i.page_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pages_init
</UL>

<P><STRONG><a name="[374]"></a>page_tag_write_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, fds.o(i.page_tag_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = page_tag_write_data &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_swap_promote
</UL>

<P><STRONG><a name="[375]"></a>page_tag_write_swap</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fds.o(i.page_tag_write_swap))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = page_tag_write_swap &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_tag_new_swap
</UL>

<P><STRONG><a name="[342]"></a>pages_init</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, fds.o(i.pages_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pages_init &rArr; page_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_scan
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_is_erased
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_identify
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
</UL>

<P><STRONG><a name="[469]"></a>queue_advance</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, fds.o(i.queue_advance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = queue_advance
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[35f]"></a>queue_process</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, fds.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + In Cycle
<LI>Call Chain = queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_execute
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_execute
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_clear
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_prepare
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_event_handler
</UL>

<P><STRONG><a name="[33c]"></a>queue_start</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fds.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_set
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_file_delete
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[347]"></a>record_find</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, fds.o(i.record_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = record_find &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_in_file
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find_by_key
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_find
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[32b]"></a>record_find_and_delete</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, fds.o(i.record_find_and_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = record_find_and_delete &rArr; record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_execute
</UL>

<P><STRONG><a name="[345]"></a>record_find_by_desc</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, fds.o(i.record_find_by_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = record_find_by_desc &rArr; record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_next
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_from_record
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;address_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_open
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_close
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
</UL>

<P><STRONG><a name="[370]"></a>record_find_next</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, fds.o(i.record_find_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = record_find_next
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;header_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gc_record_find_next
</UL>

<P><STRONG><a name="[353]"></a>record_header_flag_dirty</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fds.o(i.record_header_flag_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_flag_dirty &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_and_delete
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;file_find_and_delete
</UL>

<P><STRONG><a name="[473]"></a>record_header_write_begin</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, fds.o(i.record_header_write_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_begin &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[474]"></a>record_header_write_finalize</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_finalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_finalize &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[475]"></a>record_header_write_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fds.o(i.record_header_write_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_header_write_id &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[4b9]"></a>record_id_new</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fds.o(i.record_id_new))
<BR><BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[478]"></a>record_write_chunk</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fds.o(i.record_write_chunk))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_queue_get_and_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_execute
</UL>

<P><STRONG><a name="[34c]"></a>write_enqueue</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, fds.o(i.write_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_reserve
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_space_free
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_id_new
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;op_enqueue
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flag_is_set
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chunk_is_aligned
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write_reserved
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_record_update
</UL>

<P><STRONG><a name="[46a]"></a>write_execute</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, fds.o(i.write_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write_execute &rArr; record_write_chunk &rArr; fs_store &rArr; queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_write_chunk
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_id
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_finalize
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_write_begin
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_header_flag_dirty
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;record_find_by_desc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_offsets_update
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[352]"></a>write_space_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fds.o(i.write_space_free))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve_cancel
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[350]"></a>write_space_reserve</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, fds.o(i.write_space_reserve))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = write_space_reserve
</UL>
<BR>[Calls]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_has_space
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_reserve
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_enqueue
</UL>

<P><STRONG><a name="[35c]"></a>check_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.check_config))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[46e]"></a>erase_execute</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fstorage.o(i.erase_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[360]"></a>fs_flash_page_end_addr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fstorage.o(i.fs_flash_page_end_addr))
<BR><BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_init
</UL>

<P><STRONG><a name="[364]"></a>on_operation_failure</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fstorage.o(i.on_operation_failure))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = on_operation_failure &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[363]"></a>on_operation_success</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, fstorage.o(i.on_operation_success))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = on_operation_success &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_advance
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>

<P><STRONG><a name="[3ff]"></a>queue_advance</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, fstorage.o(i.queue_advance))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[35d]"></a>queue_get_next_free</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, fstorage.o(i.queue_get_next_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = queue_get_next_free
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[365]"></a>queue_process</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, fstorage.o(i.queue_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_execute
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_event
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_start
</UL>

<P><STRONG><a name="[35e]"></a>queue_start</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fstorage.o(i.queue_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = queue_start &rArr; queue_process &rArr; send_event
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_store
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_erase
</UL>

<P><STRONG><a name="[3fe]"></a>send_event</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, fstorage.o(i.send_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_success
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_operation_failure
</UL>

<P><STRONG><a name="[46d]"></a>store_execute</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fstorage.o(i.store_execute))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = store_execute
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;queue_process
</UL>

<P><STRONG><a name="[482]"></a>sdk_mapped_flags_get_by_index</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdk_mapped_flags.o(i.sdk_mapped_flags_get_by_index))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_key_list_get
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_get_by_key
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdk_mapped_flags_first_key_index_get
</UL>

<P><STRONG><a name="[1c4]"></a>_DoInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, segger_rtt.o(i._DoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _DoInit
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Write
</UL>

<P><STRONG><a name="[1c8]"></a>_GetAvailWriteSpace</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, segger_rtt.o(i._GetAvailWriteSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _GetAvailWriteSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[1c7]"></a>_WriteBlocking</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteBlocking &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[1c9]"></a>_WriteNoCheck</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, segger_rtt.o(i._WriteNoCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_WriteNoLock
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
</UL>

<P><STRONG><a name="[35a]"></a>rtt_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, retarget.mod.o(i.rtt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtt_init &rArr; SEGGER_RTT_SetTerminal &rArr; _WriteNoCheck &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_SetTerminal
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SEGGER_RTT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[48f]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[47f]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, softdevice_handler.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[47e]"></a>__sd_nvic_app_accessible_irq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, softdevice_handler.o(i.__sd_nvic_app_accessible_irq))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_nvic_EnableIRQ
</UL>

<P><STRONG><a name="[47d]"></a>sd_nvic_EnableIRQ</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, softdevice_handler.o(i.sd_nvic_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sd_nvic_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sd_nvic_app_accessible_irq
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
</UL>

<P><STRONG><a name="[2af]"></a>advertising_start</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ble_peripheral_task.o(i.advertising_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = advertising_start &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_evt_handler
</UL>

<P><STRONG><a name="[77]"></a>ble_evt_dispatch</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ble_peripheral_task.o(i.ble_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ble_evt_dispatch &rArr; pm_on_ble_evt &rArr; sm_ble_evt_handler &rArr; link_secure_pending_process &rArr; link_secure &rArr; smd_link_secure &rArr; link_secure_central &rArr; link_secure_central_existing_peer &rArr; sec_proc_start &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_btn_ble_on_ble_evt
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_params_on_ble_evt
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_ble_evt
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_conn_state_on_ble_evt
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_on_ble_evt
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_on_ble_evt
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_on_ble_evt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_ble_evt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_peripheral_task.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[76]"></a>ble_new_event_handler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, ble_peripheral_task.o(i.ble_new_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ble_new_event_handler &rArr; xTaskNotifyFromISR &rArr; ulPortRaiseBASEPRI
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_peripheral_task.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[2fb]"></a>ble_stack_init</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, ble_peripheral_task.o(i.ble_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ble_stack_init &rArr; softdevice_handler_init &rArr; nrf_drv_clock_on_sd_enable &rArr; nrf_drv_clock_init &rArr; nrf_drv_common_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable_get_default_config
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[2f4]"></a>on_ble_evt</STRONG> (Thumb, 308 bytes, Stack size 48 bytes, ble_peripheral_task.o(i.on_ble_evt))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = on_ble_evt &rArr; bsp_indication_set &rArr; bsp_led_indication &rArr; app_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_indication_set
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_evt_dispatch
</UL>

<P><STRONG><a name="[2fc]"></a>peer_manager_init</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, ble_peripheral_task.o(i.peer_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = peer_manager_init &rArr; pm_peers_delete &rArr; pm_peer_delete &rArr; im_peer_free &rArr; pdb_peer_free &rArr; pds_peer_id_free &rArr; peer_data_delete &rArr; fds_file_delete &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_sec_params_set
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_register
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_peers_delete
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[88]"></a>pm_evt_handler</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ble_peripheral_task.o(i.pm_evt_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = pm_evt_handler &rArr; pm_local_database_has_changed &rArr; gcm_local_database_has_changed &rArr; service_changed_pending_flags_check &rArr; service_changed_send_in_evt &rArr; gscm_db_change_notification_done &rArr; pdb_raw_store &rArr; pds_peer_data_store &rArr; fds_record_write_reserved &rArr; write_enqueue &rArr; queue_start &rArr; queue_process &rArr;  queue_process (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_local_database_has_changed
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pm_conn_sec_config_reply
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fds_gc
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advertising_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_peripheral_task.o(i.peer_manager_init)
</UL>
<P><STRONG><a name="[2fe]"></a>sensor_simulator_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ble_peripheral_task.o(i.sensor_simulator_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sensor_simulator_init
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensorsim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[2fd]"></a>services_init</STRONG> (Thumb, 480 bytes, Stack size 120 bytes, ble_peripheral_task.o(i.services_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = services_init &rArr; ble_hrs_init &rArr; heart_rate_measurement_char_add &rArr; hrm_encode &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_srv_ascii_to_utf8
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_hrs_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_dis_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_bas_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_peripheral_task
</UL>

<P><STRONG><a name="[78]"></a>sys_evt_dispatch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ble_peripheral_task.o(i.sys_evt_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sys_evt_dispatch &rArr; ble_advertising_on_sys_evt &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_on_sys_evt
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_sys_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_peripheral_task.o(i.ble_stack_init)
</UL>
<P><STRONG><a name="[7d]"></a>cling_task_core_fsm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, clingtask.o(i.cling_task_core_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = cling_task_core_fsm &rArr; TRACKING_data_logging &rArr; _logging_per_minute &rArr; _minute_data_flush_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_timer_process
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_monitor_process
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_device_unauthorized_shut_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> clingtask.o(i.cling_init_task)
</UL>
<P><STRONG><a name="[cf]"></a>BATT_read_reg</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, batt.o(i.BATT_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = BATT_read_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
</UL>

<P><STRONG><a name="[d0]"></a>BATT_write_reg</STRONG> (Thumb, 76 bytes, Stack size 72 bytes, batt.o(i.BATT_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BATT_write_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_interrupt_process
</UL>

<P><STRONG><a name="[d6]"></a>_battery_adc_acquired</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, batt.o(i._battery_adc_acquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _battery_adc_acquired &rArr; _get_battery_perc
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_battery_perc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_monitor_process
</UL>

<P><STRONG><a name="[d5]"></a>_battery_adc_idle</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, batt.o(i._battery_adc_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _battery_adc_idle &rArr; UI_turn_on_display &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_turn_on_display
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_exit_low_power_mode
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_wake_up_by_force
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_charger_reset
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_get_instance
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_monitor_process
</UL>

<P><STRONG><a name="[e0]"></a>_disconnect_clean_up</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, btle.o(i._disconnect_clean_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = _disconnect_clean_up &rArr; SYSTEM_restart_from_reset_vector &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_deauthorize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_state_machine_update
</UL>

<P><STRONG><a name="[38]"></a>aes_hash_finish_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btle.o(i.aes_hash_finish_cb))
<BR>[Address Reference Count : 2]<UL><LI> btle.o(i.BTLE_aes_decrypt)
<LI> btle.o(i.BTLE_aes_encrypt)
</UL>
<P><STRONG><a name="[79]"></a>ble_rev_process</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, btle.o(i.ble_rev_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ble_rev_process &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btle.o(i.btle_init)
</UL>
<P><STRONG><a name="[7a]"></a>btle_on_connect</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, btle.o(i.btle_on_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = btle_on_connect &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyFromISR
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btle.o(i.btle_init)
</UL>
<P><STRONG><a name="[7b]"></a>btle_on_disconnect</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, btle.o(i.btle_on_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = btle_on_disconnect &rArr; SYSTEM_restart_from_reset_vector &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOTIFIC_stop_notifying
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_radio_state_cleanup
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_reset_streaming
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btle.o(i.btle_init)
</UL>
<P><STRONG><a name="[28b]"></a>_ack_pkt_rcvr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cp.o(i._ack_pkt_rcvr))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_store_rx_msg
</UL>

<P><STRONG><a name="[100]"></a>_core_cp_packet_handling</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, cp.o(i._core_cp_packet_handling))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = _core_cp_packet_handling &rArr; _pending_process &rArr; _write_file_to_fs_head &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_API_received_pkt
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_streaming
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_process
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_filling_msg_tx_buf
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_one_pkt_from_msg
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_tx_buffer_available
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_state_machine_update
</UL>

<P><STRONG><a name="[27b]"></a>_create_ack_pkt</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cp.o(i._create_ack_pkt))
<BR><BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[24e]"></a>_create_daily_activity_info_msg</STRONG> (Thumb, 664 bytes, Stack size 40 bytes, cp.o(i._create_daily_activity_info_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = _create_daily_activity_info_msg &rArr; TRACKING_get_daily_streaming_stat &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_stat
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_streaming_sleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[24f]"></a>_create_dev_info_msg</STRONG> (Thumb, 1168 bytes, Stack size 72 bytes, cp.o(i._create_dev_info_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = _create_dev_info_msg &rArr; FILE_exists_with_prefix &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_ListFiles
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CheckSpace
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_exists_with_prefix
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_get_radio_software_version
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[251]"></a>_create_file_list_msg</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, cp.o(i._create_file_list_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = _create_file_list_msg &rArr; FILE_getFileInfo &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_GetFileNum
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[249]"></a>_create_one_pkt_from_msg</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, cp.o(i._create_one_pkt_from_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _create_one_pkt_from_msg &rArr; xTaskGenericNotify &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[252]"></a>_delete_file_from_fs</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cp.o(i._delete_file_from_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = _delete_file_from_fs &rArr; FILE_delete &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[25b]"></a>_file_read_prepare_first_pkt</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, cp.o(i._file_read_prepare_first_pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = _file_read_prepare_first_pkt &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_feof
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_file_from_fs
</UL>

<P><STRONG><a name="[248]"></a>_filling_msg_tx_buf</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, cp.o(i._filling_msg_tx_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = _filling_msg_tx_buf &rArr; FILE_getFileInfo &rArr; FILE_fclose_force &rArr; FILE_fclose &rArr; _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_getFileInfo
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_feof
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[fc]"></a>_fillup_streaming_packet</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, cp.o(i._fillup_streaming_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _fillup_streaming_packet &rArr; RTC_get_local_clock &rArr; RTC_get_regular_time
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_minute_msg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_streaming_file_minute_msg
</UL>

<P><STRONG><a name="[244]"></a>_pending_process</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, cp.o(i._pending_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1184<LI>Call Chain = _pending_process &rArr; _write_file_to_fs_head &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WEATHER_set_weather
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_profile
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_reboot
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_mutex
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REMINDER_setup
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_set_state
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_rest
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_file_to_fs_head
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_read_file_from_fs
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delete_file_from_fs
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_file_list_msg
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_dev_info_msg
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_daily_activity_info_msg
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_create_ack_pkt
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_reset_streaming
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_is_connected
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[278]"></a>_proc_pending_ctrl_wr</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cp.o(i._proc_pending_ctrl_wr))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = _proc_pending_ctrl_wr &rArr; SYSTEM_factory_reset &rArr; SYSTEM_format_disk &rArr; FAT_clear_fat_and_root_dir &rArr; FAT_create_fs &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_factory_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sync_time_proc
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_format_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[27c]"></a>_read_file_from_fs</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, cp.o(i._read_file_from_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056<LI>Call Chain = _read_file_from_fs &rArr; _file_read_prepare_first_pkt &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_file_read_prepare_first_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[f5]"></a>_rx_sp_msg_process</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, cp.o(i._rx_sp_msg_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rx_sp_msg_process &rArr; _write_ctrl_reg &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_ctrl_reg
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_create_register_rd_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CP_API_received_pkt
</UL>

<P><STRONG><a name="[283]"></a>_sync_time_proc</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, cp.o(i._sync_time_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = _sync_time_proc &rArr; TRACKING_get_daily_total &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_total
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_reset_streaming
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_proc_pending_ctrl_wr
</UL>

<P><STRONG><a name="[246]"></a>_tx_process</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cp.o(i._tx_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _tx_process &rArr; BTLE_Send_Packet &rArr; cus_notify_send &rArr; tx_send &rArr; tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[247]"></a>_tx_streaming</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, cp.o(i._tx_streaming))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _tx_streaming &rArr; BTLE_Send_Packet &rArr; cus_notify_send &rArr; tx_send &rArr; tx_buffer_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_cp_packet_handling
</UL>

<P><STRONG><a name="[279]"></a>_write_file_to_fs_head</STRONG> (Thumb, 468 bytes, Stack size 152 bytes, cp.o(i._write_file_to_fs_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = _write_file_to_fs_head &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_set_state
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_main
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_get_instance
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[27a]"></a>_write_file_to_fs_rest</STRONG> (Thumb, 496 bytes, Stack size 32 bytes, cp.o(i._write_file_to_fs_rest))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = _write_file_to_fs_rest &rArr; FILE_init &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_set_state
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_get_instance
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pending_process
</UL>

<P><STRONG><a name="[10b]"></a>_check_fs</STRONG> (Thumb, 62 bytes, Stack size 136 bytes, fs_fat.o(i._check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = _check_fs &rArr; FLASH_Read_BS &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_BS
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_I32U
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LD_I16U
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_chk_mounted
</UL>

<P><STRONG><a name="[108]"></a>_get_used_clusters</STRONG> (Thumb, 78 bytes, Stack size 144 bytes, fs_fat.o(i._get_used_clusters))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[102]"></a>_swap_fat_page</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, fs_fat.o(i._swap_fat_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_FAT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_FAT
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextChain
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_BuildChain
</UL>

<P><STRONG><a name="[12b]"></a>_read_flash_cache</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fs_file.o(i._read_flash_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = _read_flash_cache &rArr; _step_read_index &rArr; FAT_GetNextChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_read_data
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_step_read_index
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fread
</UL>

<P><STRONG><a name="[11c]"></a>_write_to_flash</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fs_file.o(i._write_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = _write_to_flash &rArr; FAT_BuildChain &rArr; _swap_fat_page &rArr; FLASH_Write_FAT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEmptyEntry
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_BuildChain
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
</UL>

<P><STRONG><a name="[13d]"></a>_core_erase</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, fs_flash.o(i._core_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _core_erase &rArr; NFLASH_drv_sector_erasure &rArr; NOR_erase_block_64k &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NFLASH_drv_sector_erasure
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_file_system
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_application_data
</UL>

<P><STRONG><a name="[1b5]"></a>_clear_FAT</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, fs_root.o(i._clear_FAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _clear_FAT
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClearEntries
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_DeleteFile
</UL>

<P><STRONG><a name="[1b4]"></a>_swap_root_page</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fs_root.o(i._swap_root_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = _swap_root_page &rArr; ROOT_flush_item &rArr; FLASH_Write_ROOT &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_ROOT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_flush_item
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileType
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileTime
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_SetFileCRC
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_OpenReadFile
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetLastPos
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileType
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileName
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_GetFileInfo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_DeleteFile
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_CreateFile
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ROOT_CloseWriteFile
</UL>

<P><STRONG><a name="[85]"></a>link_idle</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, link.o(i.link_idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = link_idle &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_get_global_buffer
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> link.o(i.link_idle)
<LI> link.o(i.link_init)
</UL>
<P><STRONG><a name="[3]"></a>link_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link.o(i.link_init))
<BR>[Address Reference Count : 1]<UL><LI> link.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>link_start_auth</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, link.o(i.link_start_auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = link_start_auth &rArr; LINK_start_authorizing &rArr; UI_switch_state &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapMgr_get_instance
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_start_authorizing
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_aes_encrypt
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mapk
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_up_random_characters
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> link.o(i.link_idle)
</UL>
<P><STRONG><a name="[83]"></a>link_wait_for_check_flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link.o(i.link_wait_for_check_flag))
<BR>[Address Reference Count : 1]<UL><LI> link.o(i.link_idle)
</UL>
<P><STRONG><a name="[84]"></a>link_write_link_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, link.o(i.link_write_link_info))
<BR>[Address Reference Count : 1]<UL><LI> link.o(i.link_idle)
</UL>
<P><STRONG><a name="[178]"></a>_get_data</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lis3dh.o(i._get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_data
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_retrieve_data
</UL>

<P><STRONG><a name="[16f]"></a>_get_reg</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, lis3dh.o(i._get_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _get_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_who_am_i
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_is_FIFO_ready
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_inertial_wake_up_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_get_interrupt
</UL>

<P><STRONG><a name="[171]"></a>_set_reg</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lis3dh.o(i._set_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _set_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_normal_FIFO
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_inertial_wake_up_init
</UL>

<P><STRONG><a name="[187]"></a>_page_program_core</STRONG> (Thumb, 112 bytes, Stack size 288 bytes, nflash_spi.o(i._page_program_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_for_operation_completed
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_tx_rx
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_pageProgram
</UL>

<P><STRONG><a name="[183]"></a>flash_tx_rx</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, nflash_spi.o(i.flash_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readData
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_64k
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_4k
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_erase_block_32k
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_ChipErase
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_writeEnable
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_releasePowerDown
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readStatusRegister
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_readID
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NOR_powerDown
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_page_program_core
</UL>

<P><STRONG><a name="[18f]"></a>_set_data</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, oled.o(i._set_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _set_data &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_high
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_full_scree_show
</UL>

<P><STRONG><a name="[18e]"></a>_set_reg</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, oled.o(i._set_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_low
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_tx_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_full_scree_show
</UL>

<P><STRONG><a name="[287]"></a>oled_tx_rx</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, oled.o(i.oled_tx_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_reg
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_data
</UL>

<P><STRONG><a name="[19b]"></a>_start_OTA</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota.o(i._start_OTA))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = _start_OTA &rArr; SYSTEM_restart_from_reset_vector &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_restart_from_reset_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_main
</UL>

<P><STRONG><a name="[273]"></a>_3D_norm</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, pedo.o(i._3D_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _3D_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_norm_A
</UL>

<P><STRONG><a name="[226]"></a>_CAR_classify</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pedo.o(i._CAR_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _CAR_classify &rArr; BASE_calculate_occurance
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_calculate_occurance
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>

<P><STRONG><a name="[241]"></a>_WALKING_RUNNING_classify</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, pedo.o(i._WALKING_RUNNING_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _WALKING_RUNNING_classify
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>

<P><STRONG><a name="[22d]"></a>_acce_correlation</STRONG> (Thumb, 636 bytes, Stack size 48 bytes, pedo.o(i._acce_correlation))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _acce_correlation &rArr; BASE_calculate_occurance
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_calculate_occurance
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_abs
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_raw_stat
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_raw_stat
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_orig_statistic
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_raw_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_processing
</UL>

<P><STRONG><a name="[289]"></a>_add_3d</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, pedo.o(i._add_3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _add_3d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_step_count
</UL>

<P><STRONG><a name="[1a5]"></a>_adj_g_est</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, pedo.o(i._adj_g_est))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _adj_g_est &rArr; _g_est_win
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_g_norm_update
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_g_est_win
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[23b]"></a>_calc_apu_p2p</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pedo.o(i._calc_apu_p2p))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _calc_apu_p2p
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>

<P><STRONG><a name="[1a1]"></a>_calc_mag</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pedo.o(i._calc_mag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _calc_mag &rArr; _comp_magnitude
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_comp_magnitude
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[22e]"></a>_calc_raw_stat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pedo.o(i._calc_raw_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _calc_raw_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
</UL>

<P><STRONG><a name="[1a7]"></a>_classifier_stat_update</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, pedo.o(i._classifier_stat_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _classifier_stat_update &rArr; _update_classifier_stat &rArr; _update_orientation
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[19f]"></a>_clean_up_random_steps</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, pedo.o(i._clean_up_random_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _clean_up_random_steps &rArr; _clear_steps_buffer
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clear_steps_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[1a3]"></a>_clear_steps_buffer</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, pedo.o(i._clear_steps_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _clear_steps_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clean_up_random_steps
</UL>

<P><STRONG><a name="[23c]"></a>_comp_magnitude</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, pedo.o(i._comp_magnitude))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _comp_magnitude
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_det_stationary
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_mag
</UL>

<P><STRONG><a name="[23f]"></a>_core_classify</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pedo.o(i._core_classify))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _core_classify &rArr; _noise_validate &rArr; _vehicle_step_check
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classification_status
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_noise_validate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_classify_win_siz
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_WALKING_RUNNING_classify
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CAR_classify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
</UL>

<P><STRONG><a name="[1a2]"></a>_det_stationary</STRONG> (Thumb, 490 bytes, Stack size 32 bytes, pedo.o(i._det_stationary))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _det_stationary &rArr; BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_sqrt
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_abs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_reset_pedo_stationary
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_comp_magnitude
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[271]"></a>_do_steps_keep_consistent</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, pedo.o(i._do_steps_keep_consistent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _do_steps_keep_consistent
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
</UL>

<P><STRONG><a name="[28a]"></a>_dot_3d</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, pedo.o(i._dot_3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _dot_3d
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_step_count
</UL>

<P><STRONG><a name="[233]"></a>_g_est_win</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, pedo.o(i._g_est_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _g_est_win
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adj_g_est
</UL>

<P><STRONG><a name="[234]"></a>_g_norm_update</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, pedo.o(i._g_norm_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _g_norm_update
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_adj_g_est
</UL>

<P><STRONG><a name="[240]"></a>_get_classify_win_siz</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, pedo.o(i._get_classify_win_siz))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_classify_win_siz
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>

<P><STRONG><a name="[270]"></a>_if_a_step_to_classify</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, pedo.o(i._if_a_step_to_classify))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
</UL>

<P><STRONG><a name="[265]"></a>_is_incidental_steps</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, pedo.o(i._is_incidental_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _is_incidental_steps &rArr; _small_step_check
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_calculate_occurance
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_small_step_check
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_noise_non_step
</UL>

<P><STRONG><a name="[267]"></a>_is_noise_non_step</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, pedo.o(i._is_noise_non_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _is_noise_non_step &rArr; _is_incidental_steps &rArr; _small_step_check
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_is_transport_mode
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_incidental_steps
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_motion_classification
</UL>

<P><STRONG><a name="[1a0]"></a>_lpf</STRONG> (Thumb, 500 bytes, Stack size 76 bytes, pedo.o(i._lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lpf
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[1a9]"></a>_motion_classification</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, pedo.o(i._motion_classification))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _motion_classification &rArr; _core_classify &rArr; _noise_validate &rArr; _vehicle_step_check
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_is_transport_mode
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_noise_non_step
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_if_a_step_to_classify
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_steps_keep_consistent
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[242]"></a>_noise_validate</STRONG> (Thumb, 294 bytes, Stack size 40 bytes, pedo.o(i._noise_validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _noise_validate &rArr; _vehicle_step_check
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vehicle_step_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>

<P><STRONG><a name="[1a4]"></a>_norm_A</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, pedo.o(i._norm_A))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _norm_A &rArr; _3D_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_3D_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[232]"></a>_orig_statistic</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, pedo.o(i._orig_statistic))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
</UL>

<P><STRONG><a name="[1a8]"></a>_reset_pedo_stationary</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pedo.o(i._reset_pedo_stationary))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_det_stationary
</UL>

<P><STRONG><a name="[230]"></a>_reset_raw_stat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pedo.o(i._reset_raw_stat))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
</UL>

<P><STRONG><a name="[266]"></a>_small_step_check</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, pedo.o(i._small_step_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _small_step_check
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_incidental_steps
</UL>

<P><STRONG><a name="[1a6]"></a>_step_count</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, pedo.o(i._step_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _step_count &rArr; _add_3d
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dot_3d
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_add_3d
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[1aa]"></a>_tick_processing</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, pedo.o(i._tick_processing))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _tick_processing &rArr; _acce_correlation &rArr; BASE_calculate_occurance
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_apu_distribution
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PEDO_main
</UL>

<P><STRONG><a name="[28c]"></a>_update_apu_distribution</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, pedo.o(i._update_apu_distribution))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _update_apu_distribution
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tick_processing
</UL>

<P><STRONG><a name="[290]"></a>_update_apu_step_ts</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, pedo.o(i._update_apu_step_ts))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>

<P><STRONG><a name="[292]"></a>_update_car_exiting</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, pedo.o(i._update_car_exiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _update_car_exiting
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>

<P><STRONG><a name="[243]"></a>_update_classification_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pedo.o(i._update_classification_status))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_classify
</UL>

<P><STRONG><a name="[23e]"></a>_update_classifier_stat</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, pedo.o(i._update_classifier_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _update_classifier_stat &rArr; _update_orientation
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_w_r_activity
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_orientation
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_car_exiting
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_apu_step_ts
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_apu_p2p
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_classifier_stat_update
</UL>

<P><STRONG><a name="[293]"></a>_update_orientation</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, pedo.o(i._update_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _update_orientation
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_abs
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>

<P><STRONG><a name="[22f]"></a>_update_raw_stat</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pedo.o(i._update_raw_stat))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_acce_correlation
</UL>

<P><STRONG><a name="[291]"></a>_update_w_r_activity</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pedo.o(i._update_w_r_activity))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_classifier_stat
</UL>

<P><STRONG><a name="[272]"></a>_vehicle_step_check</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, pedo.o(i._vehicle_step_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _vehicle_step_check
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_noise_validate
</UL>

<P><STRONG><a name="[1b0]"></a>ppg_read_reg</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ppg.o(i.ppg_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ppg_read_reg &rArr; I2CDevHal_get_instance &rArr; I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_get_instance
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPG_init
</UL>

<P><STRONG><a name="[1d1]"></a>_high_power_process_FIFO</STRONG> (Thumb, 302 bytes, Stack size 96 bytes, sensor.o(i._high_power_process_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _high_power_process_FIFO &rArr; TRACKING_algorithms_proc &rArr; PEDO_main &rArr; _det_stationary &rArr; BASE_sqrt &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_abs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_retrieve_data
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3DH_is_FIFO_ready
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_algorithms_proc
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_navigation_wrist_shaking
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
</UL>

<P><STRONG><a name="[264]"></a>_navigation_wrist_shaking</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sensor.o(i._navigation_wrist_shaking))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_power_process_FIFO
</UL>

<P><STRONG><a name="[1cf]"></a>_validate_accel_int</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sensor.o(i._validate_accel_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _validate_accel_int
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SENSOR_accel_processing
</UL>

<P><STRONG><a name="[1d6]"></a>_calc_activity_per_minute</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, sleep.o(i._calc_activity_per_minute))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _calc_activity_per_minute &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_get_system_time
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_sample_corr
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_is_sleep_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_algorithms_proc
</UL>

<P><STRONG><a name="[23a]"></a>_calc_sample_corr</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, sleep.o(i._calc_sample_corr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _calc_sample_corr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_calc_activity_per_minute
</UL>

<P><STRONG><a name="[1d7]"></a>_sleep_main_state</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, sleep.o(i._sleep_main_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _sleep_main_state &rArr; SLEEP_init &rArr; CLK_get_system_time &rArr; SYSCLK_GetFineTime &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_monitor_allowed
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_algorithms_proc
</UL>

<P><STRONG><a name="[288]"></a>_sleep_monitor_allowed</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sleep.o(i._sleep_monitor_allowed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sleep_monitor_allowed
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_charging_det_for_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_main_state
</UL>

<P><STRONG><a name="[1da]"></a>_update_activity_status_register</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(i._update_activity_status_register))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
</UL>

<P><STRONG><a name="[1dd]"></a>_update_stationary_mins</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sleep.o(i._update_stationary_mins))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
</UL>

<P><STRONG><a name="[1dc]"></a>_wristband_not_wearing_detection</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, sleep.o(i._wristband_not_wearing_detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _wristband_not_wearing_detection
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
</UL>

<P><STRONG><a name="[1e4]"></a>_critical_info_restored</STRONG> (Thumb, 740 bytes, Stack size 104 bytes, system.o(i._critical_info_restored))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _critical_info_restored &rArr; SYSTEM_backup_critical &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_local_clock
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_daily_total
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINK_is_authorized
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_sleep_by_noon
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[27f]"></a>_print_out_dev_name</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, system.o(i._print_out_dev_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _print_out_dev_name &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_dev_id
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_startup_logging
</UL>

<P><STRONG><a name="[280]"></a>_print_out_dev_version</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, system.o(i._print_out_dev_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _print_out_dev_version &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_startup_logging
</UL>

<P><STRONG><a name="[1e2]"></a>_startup_logging</STRONG> (Thumb, 582 bytes, Stack size 32 bytes, system.o(i._startup_logging))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _startup_logging &rArr; _print_out_dev_name &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_version
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_print_out_dev_name
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_CLING_init
</UL>

<P><STRONG><a name="[20b]"></a>_day_stat_reset</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tracking.o(i._day_stat_reset))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_total_data_load_file
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_midnight_local
</UL>

<P><STRONG><a name="[207]"></a>_get_activity_diff</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, tracking.o(i._get_activity_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _get_activity_diff &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_calories_per_minute
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
</UL>

<P><STRONG><a name="[261]"></a>_get_calories_per_minute</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, tracking.o(i._get_calories_per_minute))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_activity_diff
</UL>

<P><STRONG><a name="[1fa]"></a>_get_stride_length</STRONG> (Thumb, 406 bytes, Stack size 56 bytes, tracking.o(i._get_stride_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _get_stride_length &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_algorithms_proc
</UL>

<P><STRONG><a name="[208]"></a>_get_vital_minute</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tracking.o(i._get_vital_minute))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
</UL>

<P><STRONG><a name="[1fd]"></a>_logging_midnight_local</STRONG> (Thumb, 330 bytes, Stack size 160 bytes, tracking.o(i._logging_midnight_local))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = _logging_midnight_local &rArr; FLASH_Write_App &rArr; NFLASH_drv_write_sector &rArr; NOR_pageProgram &rArr; _page_program_core &rArr; NOR_writeEnable &rArr; _wait_for_operation_completed &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASE_delay_msec
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_day_stat_reset
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_get_delta_clock_backward
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
</UL>

<P><STRONG><a name="[1fc]"></a>_logging_per_minute</STRONG> (Thumb, 576 bytes, Stack size 80 bytes, tracking.o(i._logging_per_minute))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = _logging_per_minute &rArr; _minute_data_flush_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_mutex
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write_App
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_release_mutex
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTA_if_enabled
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_update_minute_base
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_whole_minute_delta
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_minute_data_flush_file
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_backup_critical
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SLEEP_minute_proc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_data_logging
</UL>

<P><STRONG><a name="[26a]"></a>_minute_data_flush_file</STRONG> (Thumb, 316 bytes, Stack size 208 bytes, tracking.o(i._minute_data_flush_file))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224<LI>Call Chain = _minute_data_flush_file &rArr; FILE_fopen &rArr; FAT_Init &rArr; _get_used_clusters &rArr; FLASH_Read_FAT &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fwrite
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_fclose
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Read_App
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_erase_App
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_logging_per_minute
</UL>

<P><STRONG><a name="[24a]"></a>_core_display_horizontal</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ui.o(i._core_display_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_weather
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_tracking_stats
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_smart
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_ota
</UL>

<P><STRONG><a name="[24d]"></a>_core_home_display_horizontal</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ui.o(i._core_home_display_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = _core_home_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_unauthorized_home
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_home
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_authenticating
</UL>

<P><STRONG><a name="[211]"></a>_display_authenticating</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i._display_authenticating))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _display_authenticating &rArr; _core_home_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_home_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[213]"></a>_display_charging</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ui.o(i._display_charging))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _display_charging &rArr; _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_battery_perc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[217]"></a>_display_frame_appear</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ui.o(i._display_frame_appear))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = _display_frame_appear &rArr; _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_tracker
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_smart
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_ota
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_home
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
</UL>

<P><STRONG><a name="[210]"></a>_display_frame_home</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ui.o(i._display_frame_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _display_frame_home &rArr; _core_home_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BATT_is_charging
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_home_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
</UL>

<P><STRONG><a name="[257]"></a>_display_frame_icon</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, ui.o(i._display_frame_icon))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _display_frame_icon &rArr; _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_get_balance
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_one_icon_24
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_button_click
</UL>

<P><STRONG><a name="[256]"></a>_display_frame_ota</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ui.o(i._display_frame_ota))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _display_frame_ota &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
</UL>

<P><STRONG><a name="[255]"></a>_display_frame_smart</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ui.o(i._display_frame_smart))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = _display_frame_smart &rArr; _display_weather &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_weather
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
</UL>

<P><STRONG><a name="[254]"></a>_display_frame_tracker</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ui.o(i._display_frame_tracker))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_unauthorized_home
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_tracking_stats
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
</UL>

<P><STRONG><a name="[25a]"></a>_display_tracking_stats</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ui.o(i._display_tracking_stats))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_tracker
</UL>

<P><STRONG><a name="[212]"></a>_display_unauthorized_home</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ui.o(i._display_unauthorized_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _display_unauthorized_home &rArr; _core_home_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_home_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_tracker
</UL>

<P><STRONG><a name="[259]"></a>_display_weather</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ui.o(i._display_weather))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = _display_weather &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_smart
</UL>

<P><STRONG><a name="[25d]"></a>_fill_local_clock</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, ui.o(i._fill_local_clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _fill_local_clock &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[216]"></a>_frame_animating</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ui.o(i._frame_animating))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = _frame_animating &rArr; _frame_panning &rArr; _display_frame_appear &rArr; _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_switch_state
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[25f]"></a>_frame_buffer_move_backward</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ui.o(i._frame_buffer_move_backward))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _frame_buffer_move_backward &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
</UL>

<P><STRONG><a name="[260]"></a>_frame_buffer_move_forward</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ui.o(i._frame_buffer_move_forward))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _frame_buffer_move_forward &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
</UL>

<P><STRONG><a name="[25e]"></a>_frame_panning</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ui.o(i._frame_panning))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = _frame_panning &rArr; _display_frame_appear &rArr; _display_frame_tracker &rArr; _display_tracking_stats &rArr; _core_display_horizontal &rArr; _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_forward
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_buffer_move_backward
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_appear
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_animating
</UL>

<P><STRONG><a name="[24b]"></a>_middle_row_render</STRONG> (Thumb, 788 bytes, Stack size 120 bytes, ui.o(i._middle_row_render))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _middle_row_render &rArr; TRACKING_get_activity &rArr; TRACKING_get_sleep_statistics &rArr; FLASH_Read_App &rArr; NFLASH_drv_read_sector &rArr; NOR_readData &rArr; NOR_releasePowerDown &rArr; flash_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_get_y_solution
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_get_x_solution
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_middle_section_small
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_middle_section_large
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_middle_section_extra
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_battery_perc
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fill_local_clock
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACKING_get_activity
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_get_ble_code
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_home_display_horizontal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>

<P><STRONG><a name="[28f]"></a>_operation_mode_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ui.o(i._operation_mode_switch))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[28e]"></a>_perform_ui_with_a_finger_touch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ui.o(i._perform_ui_with_a_finger_touch))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[27d]"></a>_perform_ui_with_button_click</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ui.o(i._perform_ui_with_button_click))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _perform_ui_with_button_click &rArr; _display_frame_icon &rArr; _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_task_notify_rendering
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCLK_restart_timer
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_animation
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_icon
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ui_touch_sensing
</UL>

<P><STRONG><a name="[253]"></a>_render_battery_perc</STRONG> (Thumb, 370 bytes, Stack size 100 bytes, ui.o(i._render_battery_perc))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = _render_battery_perc
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_charging
</UL>

<P><STRONG><a name="[20f]"></a>_render_display_restart</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ui.o(i._render_display_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _render_display_restart &rArr; _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_screen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[26b]"></a>_render_middle_section_extra</STRONG> (Thumb, 450 bytes, Stack size 60 bytes, ui.o(i._render_middle_section_extra))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _render_middle_section_extra
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[26f]"></a>_render_middle_section_large</STRONG> (Thumb, 270 bytes, Stack size 52 bytes, ui.o(i._render_middle_section_large))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _render_middle_section_large
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[26c]"></a>_render_middle_section_small</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, ui.o(i._render_middle_section_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _render_middle_section_small
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_middle_row_render
</UL>

<P><STRONG><a name="[258]"></a>_render_one_icon_24</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, ui.o(i._render_one_icon_24))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _render_one_icon_24
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_icon
</UL>

<P><STRONG><a name="[24c]"></a>_render_screen</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ui.o(i._render_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_set_display
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_full_scree_show
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_render_display_restart
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frame_panning
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_frame_icon
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_display_charging
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_home_display_horizontal
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_display_horizontal
</UL>

<P><STRONG><a name="[27e]"></a>_set_animation</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ui.o(i._set_animation))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_button_click
</UL>

<P><STRONG><a name="[215]"></a>_ui_frame_blinking</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ui.o(i._ui_frame_blinking))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[214]"></a>_ui_touch_sensing</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, ui.o(i._ui_touch_sensing))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _ui_touch_sensing &rArr; _perform_ui_with_button_click &rArr; _display_frame_icon &rArr; _render_screen &rArr; OLED_set_display &rArr; _set_reg &rArr; oled_tx_rx &rArr; SpiDevHal_get_instance &rArr; SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_task_reminder_notify
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ALERT_task_notific_notify
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_button_click
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_perform_ui_with_a_finger_touch
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_operation_mode_switch
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TOUCH_get_gesture_panel
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_state_machine
</UL>

<P><STRONG><a name="[223]"></a>_etha_sensitivity_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user.o(i._etha_sensitivity_setup))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21c]"></a>_gesture_UI_interval_set</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, user.o(i._gesture_UI_interval_set))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21d]"></a>_idle_time_setup</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, user.o(i._idle_time_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _idle_time_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[221]"></a>_pedo_sensitivity_setup</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, user.o(i._pedo_sensitivity_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _pedo_sensitivity_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21a]"></a>_ppg_interval_set</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, user.o(i._ppg_interval_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ppg_interval_set
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[220]"></a>_reminder_weekends_setup</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, user.o(i._reminder_weekends_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _reminder_weekends_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21e]"></a>_screen_on_setup</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, user.o(i._screen_on_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _screen_on_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21b]"></a>_skin_temp_interval_set</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, user.o(i._skin_temp_interval_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _skin_temp_interval_set
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[21f]"></a>_sleep_sensitive_setup</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, user.o(i._sleep_sensitive_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _sleep_sensitive_setup &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[222]"></a>_voc_frequency_setup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, user.o(i._voc_frequency_setup))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USER_setup_device
</UL>

<P><STRONG><a name="[434]"></a>nrf_gpio_pin_write</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, pinmap.o(i.nrf_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nrf_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_map_init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_low
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_set_high
</UL>

<P><STRONG><a name="[ed]"></a>BattMgrHal_init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, battmgr_hal.o(i.BattMgrHal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BattMgrHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BattMgrHal_get_instance
</UL>

<P><STRONG><a name="[3d]"></a>close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, battmgr_hal.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = close &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.BattMgrHal_init)
</UL>
<P><STRONG><a name="[39]"></a>open</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, battmgr_hal.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.BattMgrHal_init)
</UL>
<P><STRONG><a name="[3a]"></a>read</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, battmgr_hal.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_uninit
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_sample
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_init
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_uninit
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_channel_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_saadc_buffer_convert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.BattMgrHal_init)
</UL>
<P><STRONG><a name="[3b]"></a>read_async</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, battmgr_hal.o(i.read_async))
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.BattMgrHal_init)
</UL>
<P><STRONG><a name="[3c]"></a>reg_usb_charger_event</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, battmgr_hal.o(i.reg_usb_charger_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reg_usb_charger_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.BattMgrHal_init)
</UL>
<P><STRONG><a name="[8a]"></a>saadc_event_callback</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, battmgr_hal.o(i.saadc_event_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = saadc_event_callback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> battmgr_hal.o(i.read)
</UL>
<P><STRONG><a name="[235]"></a>_advertising_init</STRONG> (Thumb, 122 bytes, Stack size 184 bytes, ble_gap_mgr.o(i._advertising_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = _advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_adv_data
</UL>

<P><STRONG><a name="[4a]"></a>adv_freq_swicth_process</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ble_gap_mgr.o(i.adv_freq_swicth_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = adv_freq_swicth_process &rArr; adv_switch_to_slow_mode &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_slow_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[2aa]"></a>adv_switch_to_fast_mode</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ble_gap_mgr.o(i.adv_switch_to_fast_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = adv_switch_to_fast_mode &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_advertising_start
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
</UL>

<P><STRONG><a name="[2a6]"></a>adv_switch_to_slow_mode</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ble_gap_mgr.o(i.adv_switch_to_slow_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = adv_switch_to_slow_mode &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_freq_swicth_process
</UL>

<P><STRONG><a name="[3e]"></a>adv_timeout_cb</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ble_gap_mgr.o(i.adv_timeout_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = adv_timeout_cb &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[44]"></a>disconnect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ble_gap_mgr.o(i.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disconnect &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[45]"></a>event_process</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ble_gap_mgr.o(i.event_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = event_process &rArr; start_adv &rArr; adv_switch_to_fast_mode &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_adv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_adv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fast_conn_para
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[42]"></a>get_device_id_str</STRONG> (Thumb, 218 bytes, Stack size 88 bytes, ble_gap_mgr.o(i.get_device_id_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_device_id_str &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[384]"></a>get_device_mac_addr</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, ble_gap_mgr.o(i.get_device_mac_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_device_mac_addr &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_device_name
</UL>

<P><STRONG><a name="[46f]"></a>periph_deinit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ble_gap_mgr.o(i.periph_deinit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_on_diconnect
</UL>

<P><STRONG><a name="[470]"></a>reboot</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ble_gap_mgr.o(i.reboot))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot_on_diconnect
</UL>

<P><STRONG><a name="[46]"></a>reboot_on_diconnect</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ble_gap_mgr.o(i.reboot_on_diconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = reboot_on_diconnect &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reboot
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_deinit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[49]"></a>register_task</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_gap_mgr.o(i.register_task))
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[41]"></a>set_adv_data</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_gap_mgr.o(i.set_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = set_adv_data &rArr; _advertising_init &rArr; ble_advertising_init &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_advertising_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[43]"></a>set_device_name</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, ble_gap_mgr.o(i.set_device_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = set_device_name &rArr; get_device_mac_addr &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_device_mac_addr
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[47]"></a>set_fast_conn_para</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_gap_mgr.o(i.set_fast_conn_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_fast_conn_para &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[48]"></a>set_slow_conn_para</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ble_gap_mgr.o(i.set_slow_conn_para))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_slow_conn_para &rArr; app_error_handler_bare
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[3f]"></a>start_adv</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_gap_mgr.o(i.start_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = start_adv &rArr; adv_switch_to_fast_mode &rArr; ble_advertising_start &rArr; set_adv_mode_slow &rArr; ble_advdata_set &rArr; adv_data_encode &rArr; uuid_list_encode &rArr; uuid_list_sized_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_switch_to_fast_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[40]"></a>stop_adv</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ble_gap_mgr.o(i.stop_adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = stop_adv &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_process
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_freq_swicth_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ble_gap_mgr.o(i.GapMgr_init)
</UL>
<P><STRONG><a name="[15b]"></a>I2CDevHal_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, i2cdev_hal.o(i.I2CDevHal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2CDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CDevHal_get_instance
</UL>

<P><STRONG><a name="[63]"></a>close</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, i2cdev_hal.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = close &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[65]"></a>gps_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2cdev_hal.o(i.gps_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gps_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[386]"></a>open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, i2cdev_hal.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ppg_open
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_open
</UL>

<P><STRONG><a name="[64]"></a>pmu_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2cdev_hal.o(i.pmu_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = pmu_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[66]"></a>ppg_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, i2cdev_hal.o(i.ppg_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ppg_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[60]"></a>read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, i2cdev_hal.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[8d]"></a>twi_handler</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, i2cdev_hal.o(i.twi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = twi_handler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 2]<UL><LI> i2cdev_hal.o(i.write)
<LI> i2cdev_hal.o(i.write_read)
</UL>
<P><STRONG><a name="[61]"></a>write</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, i2cdev_hal.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = write &rArr; nrf_drv_twi_init &rArr; nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[62]"></a>write_read</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, i2cdev_hal.o(i.write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_read &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler_bare
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_xfer
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_uninit
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_init
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_enable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_twi_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2cdev_hal.o(i.I2CDevHal_init)
</UL>
<P><STRONG><a name="[157]"></a>HalOta_init</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ota_hal.o(i.HalOta_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HalOta_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalOta_get_instance
</UL>

<P><STRONG><a name="[5c]"></a>erase_all</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ota_hal.o(i.erase_all))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[5a]"></a>erase_one_block_32k</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ota_hal.o(i.erase_one_block_32k))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[58]"></a>erase_one_block_4k</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.erase_one_block_4k))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[59]"></a>erase_one_block_64k</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ota_hal.o(i.erase_one_block_64k))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[5b]"></a>get_erase_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.get_erase_size))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[55]"></a>get_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.get_size))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[54]"></a>get_status_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.get_status_register))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[57]"></a>page_program</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ota_hal.o(i.page_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = page_program
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[56]"></a>read_data</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, ota_hal.o(i.read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[53]"></a>write_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.write_disable))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[52]"></a>write_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ota_hal.o(i.write_enable))
<BR>[Address Reference Count : 1]<UL><LI> ota_hal.o(i.HalOta_init)
</UL>
<P><STRONG><a name="[159]"></a>HalRtc_init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, rtc_hal.o(i.HalRtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HalRtc_init &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalRtc_get_instance
</UL>

<P><STRONG><a name="[5f]"></a>isr_routine</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc_hal.o(i.isr_routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isr_routine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_hal.o(i.HalRtc_init)
</UL>
<P><STRONG><a name="[5d]"></a>reg_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtc_hal.o(i.reg_isr))
<BR>[Address Reference Count : 1]<UL><LI> rtc_hal.o(i.HalRtc_init)
</UL>
<P><STRONG><a name="[5e]"></a>start</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, rtc_hal.o(i.start))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_hal.o(i.HalRtc_init)
</UL>
<P><STRONG><a name="[1ed]"></a>SpiDevHal_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, spidev_hal.o(i.SpiDevHal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SpiDevHal_init &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDevHal_get_instance
</UL>

<P><STRONG><a name="[6c]"></a>acc_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spidev_hal.o(i.acc_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = acc_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[71]"></a>close</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, spidev_hal.o(i.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = close &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[6d]"></a>flash_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spidev_hal.o(i.flash_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = flash_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[72]"></a>oled_open</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, spidev_hal.o(i.oled_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = oled_open &rArr; open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[295]"></a>open</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spidev_hal.o(i.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = open &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_open
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acc_open
</UL>

<P><STRONG><a name="[6e]"></a>read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, spidev_hal.o(i.read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[6f]"></a>write</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spidev_hal.o(i.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = write &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[70]"></a>write_read</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, spidev_hal.o(i.write_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = write_read &rArr; nrf_drv_spi_init &rArr; nrf_drv_common_per_res_acquire &rArr; acquire_shared_resource &rArr; app_util_critical_region_enter &rArr; sd_nvic_critical_region_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_uninit
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_transfer
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_spi_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spidev_hal.o(i.SpiDevHal_init)
</UL>
<P><STRONG><a name="[4b]"></a>decrypt</STRONG> (Thumb, 58 bytes, Stack size 528 bytes, aes_hal.o(i.decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = decrypt &rArr; AES_generateSBox
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_set_key
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_generateSBox
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_convert_key
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_cbc_decrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes_hal.o(i.HalAes_init)
</UL>
<P><STRONG><a name="[4e]"></a>disable_clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aes_hal.o(i.disable_clock))
<BR>[Address Reference Count : 1]<UL><LI> aes_hal.o(i.HalAes_init)
</UL>
<P><STRONG><a name="[4d]"></a>enable_clock</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aes_hal.o(i.enable_clock))
<BR>[Address Reference Count : 1]<UL><LI> aes_hal.o(i.HalAes_init)
</UL>
<P><STRONG><a name="[4c]"></a>encrypt</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, aes_hal.o(i.encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = encrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aes_hal.o(i.HalAes_init)
</UL>
<P><STRONG><a name="[153]"></a>HalExti_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, exti_hal.o(i.HalExti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HalExti_init &rArr; hw_exti_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalExti_get_instance
</UL>

<P><STRONG><a name="[51]"></a>disable_all</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, exti_hal.o(i.disable_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disable_all &rArr; nrf_drv_gpiote_in_event_disable &rArr; nrf_gpio_cfg_sense_set
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exti_hal.o(i.HalExti_init)
</UL>
<P><STRONG><a name="[50]"></a>enable_all</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, exti_hal.o(i.enable_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = enable_all &rArr; nrf_drv_gpiote_in_event_enable &rArr; nrf_gpiote_event_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_event_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> exti_hal.o(i.HalExti_init)
</UL>
<P><STRONG><a name="[155]"></a>hw_exti_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, exti_hal.o(i.hw_exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = hw_exti_init &rArr; nrf_drv_gpiote_in_init &rArr; channel_port_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_drv_gpiote_in_init
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalExti_init
</UL>

<P><STRONG><a name="[4f]"></a>reg_isr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exti_hal.o(i.reg_isr))
<BR>[Address Reference Count : 1]<UL><LI> exti_hal.o(i.HalExti_init)
</UL>
<P><STRONG><a name="[1f5]"></a>errata_108</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_108))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ee]"></a>errata_16</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_16))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1ef]"></a>errata_31</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_31))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f0]"></a>errata_32</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_32))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f1]"></a>errata_36</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_36))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f2]"></a>errata_37</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_37))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f3]"></a>errata_57</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_57))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1f4]"></a>errata_66</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system_nrf52.o(i.errata_66))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[22a]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[282]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[281]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[75]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
